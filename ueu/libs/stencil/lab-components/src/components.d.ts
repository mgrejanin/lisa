/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface LabButton {
        /**
          * Habilita ou desabilita interação para edição
         */
        "isEditing": boolean;
        /**
          * Texto do botão
         */
        "label": string;
        /**
          * Tipo do botão
         */
        "type": 'button' | 'button_link';
    }
    interface LabCardButton {
        /**
          * Imagem do avatar
         */
        "avatar": string;
        /**
          * Texto de descrição/apoio
         */
        "description": string;
        /**
          * Indica se o componente está em edição
         */
        "isEditing": boolean;
        /**
          * Texto em destaque
         */
        "spotlight": string;
        /**
          * Valor do card
         */
        "value": string;
    }
    interface LabHeader {
        /**
          * Imagem do avatar
         */
        "avatar": string;
        /**
          * Imagem do banner
         */
        "banner": string;
        /**
          * Indica se o componente está em edição
         */
        "isEditing": boolean;
        /**
          * Título do header
         */
        "pageTitle": string;
    }
    interface LabInput {
        /**
          * Indica o tipo de Input
         */
        "inputType": 'general' | 'number' | 'email' | 'password';
        /**
          * Propriedade de edição do componente
         */
        "isEditing": boolean;
        /**
          * Indica se o Input estará habilitado
         */
        "isEnabled": boolean;
        /**
          * Label do Input
         */
        "label": string;
        /**
          * Tamanho máximo do Input
         */
        "maxSize"?: string;
        /**
          * Valor default
         */
        "text": string;
    }
    interface LabMarkdown {
        /**
          * Texto do corpo, podendo conter ou não marcação html
         */
        "text": string;
    }
    interface LabPage {
    }
    interface LabSimpleHeader {
        /**
          * Indica se o componente está em edição
         */
        "isEditing": boolean;
        /**
          * Título da tela
         */
        "pageTitle": string;
    }
    interface LabTitle {
        /**
          * Indica se o componente está em edição
         */
        "isEditing": boolean;
        /**
          * Texto a ser exibido
         */
        "text": string;
        /**
          * Variação do componente a ser exbida
         */
        "type": 'title' | 'subtitle';
    }
    interface LabTransformer {
        /**
          * Estrutua do componente gerado
         */
        "component": TComponent;
    }
}
declare global {
    interface HTMLLabButtonElement extends Components.LabButton, HTMLStencilElement {
    }
    var HTMLLabButtonElement: {
        prototype: HTMLLabButtonElement;
        new (): HTMLLabButtonElement;
    };
    interface HTMLLabCardButtonElement extends Components.LabCardButton, HTMLStencilElement {
    }
    var HTMLLabCardButtonElement: {
        prototype: HTMLLabCardButtonElement;
        new (): HTMLLabCardButtonElement;
    };
    interface HTMLLabHeaderElement extends Components.LabHeader, HTMLStencilElement {
    }
    var HTMLLabHeaderElement: {
        prototype: HTMLLabHeaderElement;
        new (): HTMLLabHeaderElement;
    };
    interface HTMLLabInputElement extends Components.LabInput, HTMLStencilElement {
    }
    var HTMLLabInputElement: {
        prototype: HTMLLabInputElement;
        new (): HTMLLabInputElement;
    };
    interface HTMLLabMarkdownElement extends Components.LabMarkdown, HTMLStencilElement {
    }
    var HTMLLabMarkdownElement: {
        prototype: HTMLLabMarkdownElement;
        new (): HTMLLabMarkdownElement;
    };
    interface HTMLLabPageElement extends Components.LabPage, HTMLStencilElement {
    }
    var HTMLLabPageElement: {
        prototype: HTMLLabPageElement;
        new (): HTMLLabPageElement;
    };
    interface HTMLLabSimpleHeaderElement extends Components.LabSimpleHeader, HTMLStencilElement {
    }
    var HTMLLabSimpleHeaderElement: {
        prototype: HTMLLabSimpleHeaderElement;
        new (): HTMLLabSimpleHeaderElement;
    };
    interface HTMLLabTitleElement extends Components.LabTitle, HTMLStencilElement {
    }
    var HTMLLabTitleElement: {
        prototype: HTMLLabTitleElement;
        new (): HTMLLabTitleElement;
    };
    interface HTMLLabTransformerElement extends Components.LabTransformer, HTMLStencilElement {
    }
    var HTMLLabTransformerElement: {
        prototype: HTMLLabTransformerElement;
        new (): HTMLLabTransformerElement;
    };
    interface HTMLElementTagNameMap {
        "lab-button": HTMLLabButtonElement;
        "lab-card-button": HTMLLabCardButtonElement;
        "lab-header": HTMLLabHeaderElement;
        "lab-input": HTMLLabInputElement;
        "lab-markdown": HTMLLabMarkdownElement;
        "lab-page": HTMLLabPageElement;
        "lab-simple-header": HTMLLabSimpleHeaderElement;
        "lab-title": HTMLLabTitleElement;
        "lab-transformer": HTMLLabTransformerElement;
    }
}
declare namespace LocalJSX {
    interface LabButton {
        /**
          * Habilita ou desabilita interação para edição
         */
        "isEditing"?: boolean;
        /**
          * Texto do botão
         */
        "label"?: string;
        /**
          * Tipo do botão
         */
        "type"?: 'button' | 'button_link';
    }
    interface LabCardButton {
        /**
          * Imagem do avatar
         */
        "avatar"?: string;
        /**
          * Texto de descrição/apoio
         */
        "description"?: string;
        /**
          * Indica se o componente está em edição
         */
        "isEditing"?: boolean;
        /**
          * Evento disparado quando o card button for clicado
         */
        "onActionButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Texto em destaque
         */
        "spotlight"?: string;
        /**
          * Valor do card
         */
        "value"?: string;
    }
    interface LabHeader {
        /**
          * Imagem do avatar
         */
        "avatar"?: string;
        /**
          * Imagem do banner
         */
        "banner"?: string;
        /**
          * Indica se o componente está em edição
         */
        "isEditing"?: boolean;
        /**
          * Evento disparado quando o botão "voltar" for clicado
         */
        "onBackButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Evento disparado quando houver clique para editar o header
         */
        "onEdit"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Título do header
         */
        "pageTitle"?: string;
    }
    interface LabInput {
        /**
          * Indica o tipo de Input
         */
        "inputType"?: 'general' | 'number' | 'email' | 'password';
        /**
          * Propriedade de edição do componente
         */
        "isEditing"?: boolean;
        /**
          * Indica se o Input estará habilitado
         */
        "isEnabled"?: boolean;
        /**
          * Label do Input
         */
        "label"?: string;
        /**
          * Tamanho máximo do Input
         */
        "maxSize"?: string;
        /**
          * Valor default
         */
        "text"?: string;
    }
    interface LabMarkdown {
        /**
          * Texto do corpo, podendo conter ou não marcação html
         */
        "text"?: string;
    }
    interface LabPage {
    }
    interface LabSimpleHeader {
        /**
          * Indica se o componente está em edição
         */
        "isEditing"?: boolean;
        /**
          * Evento disparado quando o botão "voltar" for clicado
         */
        "onBackButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Título da tela
         */
        "pageTitle"?: string;
    }
    interface LabTitle {
        /**
          * Indica se o componente está em edição
         */
        "isEditing"?: boolean;
        /**
          * Texto a ser exibido
         */
        "text"?: string;
        /**
          * Variação do componente a ser exbida
         */
        "type"?: 'title' | 'subtitle';
    }
    interface LabTransformer {
        /**
          * Estrutua do componente gerado
         */
        "component"?: TComponent;
    }
    interface IntrinsicElements {
        "lab-button": LabButton;
        "lab-card-button": LabCardButton;
        "lab-header": LabHeader;
        "lab-input": LabInput;
        "lab-markdown": LabMarkdown;
        "lab-page": LabPage;
        "lab-simple-header": LabSimpleHeader;
        "lab-title": LabTitle;
        "lab-transformer": LabTransformer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lab-button": LocalJSX.LabButton & JSXBase.HTMLAttributes<HTMLLabButtonElement>;
            "lab-card-button": LocalJSX.LabCardButton & JSXBase.HTMLAttributes<HTMLLabCardButtonElement>;
            "lab-header": LocalJSX.LabHeader & JSXBase.HTMLAttributes<HTMLLabHeaderElement>;
            "lab-input": LocalJSX.LabInput & JSXBase.HTMLAttributes<HTMLLabInputElement>;
            "lab-markdown": LocalJSX.LabMarkdown & JSXBase.HTMLAttributes<HTMLLabMarkdownElement>;
            "lab-page": LocalJSX.LabPage & JSXBase.HTMLAttributes<HTMLLabPageElement>;
            "lab-simple-header": LocalJSX.LabSimpleHeader & JSXBase.HTMLAttributes<HTMLLabSimpleHeaderElement>;
            "lab-title": LocalJSX.LabTitle & JSXBase.HTMLAttributes<HTMLLabTitleElement>;
            "lab-transformer": LocalJSX.LabTransformer & JSXBase.HTMLAttributes<HTMLLabTransformerElement>;
        }
    }
}
