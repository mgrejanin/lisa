/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ResponsiveProp } from "./helpers/responsive.helper";
import { Align, BorderRadius, BorderWidth, FontSize, FontWeight, Justify, LineHeight, Opacity, Shadow, Spacing } from "./components/layouts/box/box";
import { Size } from "./components/layouts/container/container";
import { Align as Align1, Direction, Justify as Justify1 } from "./components/layouts/flex/flex";
import { Size as Size1 } from "./components/layouts/heading/heading";
import { FontSize as FontSize1 } from "./components/layouts/link/link";
import { Spacing as Spacing1 } from "./components/layouts/simple-grid/simple-grid";
import { Align as Align2, Direction as Direction1, Justify as Justify2, Spacing as Spacing2 } from "./components/layouts/stack/stack";
import { FontSize as FontSize2, FontWeight as FontWeight1, TextAlign } from "./components/layouts/text/text";
import { Align as Align3, Direction as Direction2, Justify as Justify3, Spacing as Spacing3 } from "./components/layouts/wrap/wrap";
export namespace Components {
    interface ApolloAvatar {
        /**
          * Alt da imagem do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "alt": string;
        /**
          * Borda do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "border": 'none' | 'light' | 'medium' | 'strong';
        /**
          * Radius do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "radius": 'none' | 'light' | 'medium' | 'strong' | 'full';
        /**
          * Tamanho do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "size": 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Imagem do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "src": string;
    }
    interface ApolloBadge {
        /**
          * Number
         */
        "quantity": string | number;
        /**
          * Type of badge
         */
        "variant": 'numeric' | 'simple';
    }
    interface ApolloBox {
        /**
          * Abreviação de prop no estilo `alignItems`
         */
        "alignItems": Align;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "backgroundColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "bg": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderWidth`
         */
        "border": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderBottom`
         */
        "borderBottom": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderBottomColor`
         */
        "borderBottomColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderBottomLeftBottom`
         */
        "borderBottomLeftRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomRightRadius` and `borderBottomLeftRadius`
         */
        "borderBottomRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomRightRadius`
         */
        "borderBottomRightRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomWidth`
         */
        "borderBottomWidth": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderColor`
         */
        "borderColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderLeft`
         */
        "borderLeft": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderLeftColor`
         */
        "borderLeftColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius` and `borderBottomLeftRadius`
         */
        "borderLeftRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderLeftWidth`
         */
        "borderLeftWidth": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderRadius`
         */
        "borderRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderRight`
         */
        "borderRight": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderRightColor`
         */
        "borderRightColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopRightRadius` and `borderBottomRightRadius`
         */
        "borderRightRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderRightWidth`
         */
        "borderRightWidth": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTop`
         */
        "borderTop": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTopColor`
         */
        "borderTopColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius`
         */
        "borderTopLeftRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius` and `borderTopRightRadius`
         */
        "borderTopRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopRightRadius`
         */
        "borderTopRightRadius": BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopWidth`
         */
        "borderTopWidth": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderWidth`
         */
        "borderWidth": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderLeft` and `borderRight`
         */
        "borderX": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTop` and `borderBottom`
         */
        "borderY": BorderWidth;
        /**
          * Abreviação de propriedade de estilo `boxShadow`
         */
        "boxShadow": Shadow;
        /**
          * Abreviação de propriedade de estilo `color`
         */
        "color": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `display`
         */
        "display": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `fontSize`
         */
        "fontSize": FontSize;
        /**
          * Abreviação de propriedade de estilo `fontWeight`
         */
        "fontWeight": FontWeight;
        /**
          * Abreviação de propriedade de estilo `height`
         */
        "height": ResponsiveProp<string>;
        /**
          * Abreviação de prop de estilo `justifyContent`
         */
        "justify": Justify;
        /**
          * Abreviação de propriedade de estilo `lineHeight`
         */
        "lineHeight": LineHeight;
        /**
          * Abreviação de propriedade de estilo `margin`
         */
        "m": Spacing;
        /**
          * Abreviação de propriedade de estilo `margin`
         */
        "margin": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginBottom`
         */
        "marginBottom": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginLeft`
         */
        "marginLeft": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginRight`
         */
        "marginRight": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginTop`
         */
        "marginTop": Spacing;
        /**
          * Abreviação de propriedade de estilo `maxHeight`
         */
        "maxH": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `maxWidth`
         */
        "maxW": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `marginBottom`
         */
        "mb": Spacing;
        /**
          * Abreviação de propriedade de estilo `minHeight`
         */
        "minH": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `minWidth`
         */
        "minW": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `marginLeft`
         */
        "ml": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginRight`
         */
        "mr": Spacing;
        /**
          * Abreviação de propriedade de estilo `marginTop`
         */
        "mt": Spacing;
        /**
          * Abreviação de propriedade de estilo `opacity`
         */
        "opacity": Opacity;
        /**
          * Abreviação de propriedade de estilo `padding`
         */
        "p": Spacing;
        /**
          * Abreviação de propriedade de estilo `padding`
         */
        "padding": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingBottom`
         */
        "paddingBottom": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingLeft`
         */
        "paddingLeft": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingRight`
         */
        "paddingRight": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingTop`
         */
        "paddingTop": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingBottom`
         */
        "pb": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingLeft`
         */
        "pl": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingRight`
         */
        "pr": Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingTop`
         */
        "pt": Spacing;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "width": ResponsiveProp<string>;
    }
    interface ApolloButton {
        /**
          * Botão em bloco
         */
        "block": boolean;
        /**
          * Botão no formato danger
         */
        "danger": boolean;
        /**
          * Desabilita o botão
         */
        "disabled": boolean;
        /**
          * Página de destino quando clicado
         */
        "href": string;
        /**
          * Habilita o loading no botão
         */
        "loading": boolean;
        /**
          * Referência do name nativo
         */
        "name": string;
        /**
          * Feedback tátil
         */
        "ripple": boolean;
        /**
          * Botão redondo
         */
        "round": boolean;
        /**
          * API para alterar o loading do button
         */
        "setLoading": (loading: boolean) => Promise<void>;
        /**
          * Tamanho do botão
         */
        "size": 'sm' | 'md';
        /**
          * Define se a URL passada no href vai ser aberta na mesma aba ou não
         */
        "target": '_blank' | '_self';
        /**
          * Referência do type nativo
         */
        "type": 'button' | 'submit' | 'menu' | 'reset';
        /**
          * Referência do value nativo
         */
        "value": string;
        /**
          * O estilo do botão
         */
        "variant": 'link' | 'raised' | 'outlined' | 'unelevated';
    }
    interface ApolloCard {
        /**
          * Propriedade para controlar border-radius do componente.
         */
        "radius": 'light' | 'medium' | 'strong';
        /**
          * O estilo do card
         */
        "variant": 'outlined' | 'unelevated';
    }
    interface ApolloCardActionButtons {
    }
    interface ApolloCardActionIcons {
    }
    interface ApolloCardActions {
    }
    interface ApolloCardContent {
    }
    interface ApolloCardMedia {
        /**
          * Escala automaticamente a altura da área de mídia de acordo com sua largura, mantendo uma proporção quadrada ou 16:9.
         */
        "format": 'square' | '16:9' | '1:1';
        /**
          * Escala automaticamente a altura da área de mídia de acordo com sua largura, mantendo uma proporção quadrada ou 16:9.
         */
        "image": string;
    }
    interface ApolloCardMediaContent {
    }
    interface ApolloCenter {
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "backgroundColor": ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "bg": ResponsiveProp<string>;
        /**
          * Altura do box
         */
        "height": ResponsiveProp<string>;
        /**
          * Largura do box
         */
        "width": ResponsiveProp<string>;
    }
    interface ApolloCheckbox {
        /**
          * Indica se o componente está selecionado
         */
        "checked": boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled": boolean;
        /**
          * Habilita/Desabilita o estado indeterminado do componente
         */
        "indeterminate": boolean;
        /**
          * Habilita o estado inválido do input
         */
        "invalid": boolean;
        /**
          * Referência do input nativo
         */
        "name": string;
        /**
          * nowrap
         */
        "nowrap": boolean;
        /**
          * Posição do texto com base no componente
         */
        "position": 'before' | 'after';
        /**
          * API que habilita/desabilita o componente
         */
        "setDisabled": (disabled: boolean) => Promise<void>;
    }
    interface ApolloCircularProgress {
        /**
          * Deixa o componente em estado fixo
         */
        "determinate": boolean;
        /**
          * Aplica a cor branca na linha
         */
        "invert": boolean;
        /**
          * Texto de ajuda para acessibilidade
         */
        "label": string;
        /**
          * Tamanho do progresso. Min: 0 | Max: 1
         */
        "progress": number;
        /**
          * Raio do circulo
         */
        "radius": number;
        /**
          * API para deixar o estado fixo ou não
          * @param determinate boolean
         */
        "setDeterminate": (determinate: boolean) => Promise<void>;
        /**
          * API para setar o progresso do circulo
          * @param progress number
         */
        "setProgress": (progress: number) => Promise<void>;
        /**
          * Largura da linha
         */
        "stroke": number;
    }
    interface ApolloCollapse {
        /**
          * Quando definido como verdadeiro, o `collapse` irá alternar aberto
         */
        "collapsed": boolean;
    }
    interface ApolloContainer {
        /**
          * Se for `true`, o container centralizará seus filhos independentemente de sua largura.
         */
        "centerContent": boolean;
        /**
          * A largura de um container fluído é limitada pelo valor da propriedade `maxW`.
         */
        "fluid": boolean;
        /**
          * Determine a largura máxima do container. A largura do container aumenta com o tamanho da tela.
         */
        "maxW": Size;
    }
    interface ApolloDialog {
        /**
          * Label do botão cancelar
         */
        "cancelButtonLabel": string;
        /**
          * API para fechar o dialog
         */
        "close": () => Promise<void>;
        /**
          * Label do botão confirmar
         */
        "confirmButtonLabel": string;
        /**
          * Subtitulo do dialog
         */
        "dialogSubtitle": string;
        /**
          * Título do dialog
         */
        "dialogTitle": string;
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "figure": string;
        /**
          * Ícone da dialog
         */
        "icon": string;
        /**
          * API para abrir o dialog
         */
        "open": () => Promise<void>;
    }
    interface ApolloFeedbackButton {
        /**
          * Estado do botão
         */
        "checked": boolean;
        /**
          * Aplica um delay para o botão voltar ao estado inicial
         */
        "delay": number;
        /**
          * API para alterar o toggle
         */
        "setChecked": (checked: boolean) => Promise<void>;
        /**
          * Tamanho do botão
         */
        "size": 'sm' | 'md';
        /**
          * API para chamar a animação de feedback
         */
        "startFeedbackTimeout": (delay: number) => Promise<unknown>;
        /**
          * Label do botão com estado de toggle off
         */
        "toggleOffLabel": string;
        /**
          * Label do botão com estado de toggle on
         */
        "toggleOnLabel": string;
    }
    interface ApolloFeedbackCard {
        /**
          * Ativa ênfase no card
         */
        "emphasis": boolean;
        /**
          * Label do card
         */
        "label": string;
        /**
          * Renderiza o card no modo stacked
         */
        "stacked": boolean;
        /**
          * Tipo do card
         */
        "type": 'info' | 'done' | 'warning' | 'error';
    }
    interface ApolloFeedbackDialog {
        /**
          * Label do botão cancelar
         */
        "cancelButtonLabel": string;
        /**
          * API para fechar o dialog
         */
        "close": () => Promise<void>;
        /**
          * Label do botão confirmar
         */
        "confirmButtonLabel": string;
        /**
          * Subtitulo do dialog
         */
        "dialogSubtitle": string;
        /**
          * Título do dialog
         */
        "dialogTitle": string;
        /**
          * API para abrir o dialog
         */
        "open": () => Promise<void>;
        /**
          * Tipo do dialog
         */
        "type": 'info' | 'done' | 'warning' | 'error';
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "useFigureVersionForMobile": boolean;
    }
    interface ApolloFeedbackPage {
        /**
          * Subtítulo da feedback page
         */
        "pageSubtitle": string;
        /**
          * Título da feedback page
         */
        "pageTitle": string;
        /**
          * Tipo da feedback page
         */
        "type": 'info' | 'done' | 'warning' | 'error';
        /**
          * Seta a versão Figure
         */
        "useFigure": boolean;
    }
    interface ApolloFeedbackPageActions {
    }
    interface ApolloFeedbackPageContent {
    }
    interface ApolloFlex {
        /**
          * Abreviação de prop no estilo `alignItems`
         */
        "alignItems": Align;
        /**
          * Abreviação de prop no estilo `flexDirection`
         */
        "direction": Direction;
        /**
          * Abreviação de prop no estilo `flexGrow`
         */
        "grow": ResponsiveProp<number>;
        /**
          * Abreviação de prop de estilo `justifyContent`
         */
        "justify": Justify;
        /**
          * Pode mudar a ordem usando `reverse`
         */
        "reverse": Direction;
        /**
          * Cria um espaçamento igual entre os elementos. Mantendo o primeiro grudado no início e o último no final.
         */
        "spacer": boolean;
        /**
          * Abreviação de prop no estilo `flexWrap` adiciona o valor `wrap`
         */
        "wrap": boolean;
    }
    interface ApolloGhostElement {
        /**
          * Espaçamento aplicado ao elemento
         */
        "display": string;
        /**
          * Altura do elemento
         */
        "height": string;
        /**
          * Margem aplicada ao elemento
         */
        "margin": string;
        /**
          * Espaçamento aplicado ao elemento
         */
        "padding": string;
        /**
          * Largura do elemento
         */
        "width": string;
    }
    interface ApolloGrid {
        /**
          * Abreviação de prop no estilo `gap`
         */
        "gap": number;
        /**
          * Abreviação de prop no estilo `height`
         */
        "height": string;
        /**
          * Abreviação de prop no estilo `templateColumns`
         */
        "templateColumns": string;
        /**
          * Abreviação de prop no estilo `templateRows`
         */
        "templateRows": string;
    }
    interface ApolloGridItem {
        /**
          * Cor de fundo
         */
        "backgroundColor": ResponsiveProp<string>;
        /**
          * Cor de fundo
         */
        "bg": ResponsiveProp<string>;
        /**
          * colEnd
         */
        "colEnd": number;
        /**
          * colSpan
         */
        "colSpan": number;
        /**
          * colStart
         */
        "colStart": number;
        /**
          * rowEnd
         */
        "rowEnd": number;
        /**
          * rowSpan
         */
        "rowSpan": number;
        /**
          * rowStart
         */
        "rowStart": number;
    }
    interface ApolloHeader {
        /**
          * backButton
         */
        "backButton": boolean;
        /**
          * collapsed
         */
        "collapsed": boolean;
        /**
          * media
         */
        "media": boolean;
    }
    interface ApolloHeading {
        /**
          * Cor de conteúdo
         */
        "color": ResponsiveProp<string>;
        /**
          * Passe `isTruncated` para renderizar reticência quando o texto exceder a largura.
         */
        "isTruncated": boolean;
        /**
          * Da mesma forma, que o `isTruncated` passe a propriedade `noOfLines` e defina-o com o número de linhas desejado.
         */
        "noOfLines": number;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `size`.
         */
        "size": Size;
    }
    interface ApolloIcon {
        /**
          * Cor do ícone. Tokens DS.
         */
        "color": string;
        /**
          * Cor do ícone. Hexadecimal.
         */
        "fill": string;
        /**
          * Texto de ajuda. Para acessibilidade.
         */
        "label": string;
        /**
          * O atributo que define a função.
         */
        "role": string;
        /**
          * O tamanho do ícone
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * O nome do ícone SVG.
         */
        "svgIcon": string;
        /**
          * O tipo do ícone SVG
         */
        "typeIcon": string;
    }
    interface ApolloIconButton {
        /**
          * checked
         */
        "checked": boolean;
        /**
          * color
         */
        "color": string;
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * icon
         */
        "icon": string;
        /**
          * iconOff
         */
        "iconOff": string;
        /**
          * iconOn
         */
        "iconOn": string;
        /**
          * iconPack
         */
        "iconPack": string;
        /**
          * Habilita o estado inválido do input
         */
        "invalid": boolean;
        /**
          * labelOff
         */
        "labelOff": string;
        /**
          * labelOn
         */
        "labelOn": string;
        /**
          * pid
         */
        "pid": string;
        /**
          * size
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "size": 'sm' | 'md';
    }
    interface ApolloLink {
        /**
          * Cor de conteúdo
         */
        "color": ResponsiveProp<string>;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `fontSize`.
         */
        "fontSize": FontSize;
        /**
          * Cor do link quando em estado hover
         */
        "hoverColor": ResponsiveProp<string>;
        /**
          * Contém um URL ou fragmento de URL para o qual o hiperlink aponta. * Se esta propriedade for definida, uma tag âncora será renderizada.
         */
        "href": string;
        /**
          * Se `true`, o link será aberto em uma nova aba
         */
        "isExternal": boolean;
    }
    interface ApolloList {
        /**
          * Adiciona um estilo para a lista parecer mais compacta
         */
        "dense": boolean;
    }
    interface ApolloListDivider {
    }
    interface ApolloListGroup {
        /**
          * Adiciona um título para o grupo
         */
        "header": string;
    }
    interface ApolloListItem {
        /**
          * Desabilita o item
         */
        "disabled": boolean;
        /**
          * Adiciona uma role para o item
         */
        "role": 'menuitem' | 'option';
        /**
          * Adiciona um texto secundário para o item
         */
        "secondaryText": string | null;
        /**
          * Se é componente de select
         */
        "select": boolean;
        /**
          * Adiciona estilo de seleção ao item
         */
        "selected": boolean;
        /**
          * Adiciona um valor ao item
         */
        "value": any;
    }
    interface ApolloLogo {
        /**
          * O nome curto do logo.
         */
        "nickname": string;
    }
    interface ApolloMenu {
        /**
          * Fecha o menu
         */
        "close": () => Promise<void>;
        /**
          * Estado de aberto/fechado do menu
         */
        "defaultOpen": boolean;
        /**
          * Abre o menu
         */
        "open": () => Promise<void>;
        /**
          * Se é menu do select
         */
        "select": boolean;
        /**
          * Alterna o estado do menu entre aberto/fechado
         */
        "toggle": () => Promise<void>;
    }
    interface ApolloMenuItem {
        /**
          * Contém um URL ou fragmento de URL para o qual o hiperlink aponta. * Se esta propriedade for definida, uma tag âncora será renderizada.
         */
        "href": string;
        /**
          * Se `true`, o link será aberto em uma nova aba
         */
        "isExternal": boolean;
    }
    interface ApolloModal {
        /**
          * API para fechar o dialog
         */
        "close": () => Promise<void>;
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "figure": string;
        /**
          * Ícone da dialog
         */
        "icon": string;
        /**
          * Subtitulo do dialog
         */
        "modalSubtitle": string;
        /**
          * Título do dialog
         */
        "modalTitle": string;
        /**
          * API para abrir o dialog
         */
        "open": () => Promise<void>;
    }
    interface ApolloNavItem {
        /**
          * Mark this item as disabled.
         */
        "disabled": boolean;
        /**
          * make the item selectable
         */
        "selectable": boolean;
        /**
          * Mark this item as selected.
         */
        "selected": boolean;
    }
    interface ApolloPage {
    }
    interface ApolloProgressBar {
        /**
          * Valor da fração, que equivale ao progresso atual
         */
        "fraction": number;
        /**
          * Valor total, que equivale a 100% do progresso
         */
        "total": number;
    }
    interface ApolloRadio {
        /**
          * Indica se o componente está selecionado
         */
        "checked": boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled": boolean;
        /**
          * Adiciona margens para display em inline
         */
        "inline": boolean;
        /**
          * Indica se o componente está inválido
         */
        "invalid": boolean;
        /**
          * Texto vinculado ao componente
         */
        "label": string;
        /**
          * Nome do componente para agrupar radio buttons em forms
         */
        "name": string;
        /**
          * nowrap
         */
        "nowrap": boolean;
        /**
          * Posição do texto com base no componente
         */
        "position": 'before' | 'after';
        /**
          * API que habilita/desabilita o componente
         */
        "setDisabled": (disabled: boolean) => Promise<void>;
        /**
          * Valor do componente
         */
        "value": string;
    }
    interface ApolloRipple {
        /**
          * Abreviação de propriedade de estilo `height`
         */
        "height": string;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "round": boolean;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "width": string;
    }
    interface ApolloSearchBar {
        /**
          * Seta o valor do input
         */
        "value": string;
    }
    interface ApolloSelect {
        /**
          * Habilita o estado desativado do Select
         */
        "disabled": boolean;
        /**
          * Quando verdadeiro fixa a exibição do texto de ajuda mesmo que o campo não esteja em foco
         */
        "helperPersist": boolean;
        /**
          * Texto de ajuda
         */
        "helperText": string;
        /**
          * Id único do Select
         */
        "idElement": string;
        /**
          * Habilita o estado inválido do Select
         */
        "invalid": boolean;
        /**
          * Label do Select | Usado como placeholder ou float-label dependendo da configuração do componente
         */
        "label": string;
        /**
          * Ícone localizado na parte esquerda
         */
        "leadingIcon": boolean;
        /**
          * Referência do Select nativo
         */
        "name": string;
        /**
          * Deixa o label apenas como placeholder
         */
        "noFloatingLabel": boolean;
        /**
          * Marca o campo como obrigatório e adiciona um * no final do label/placeholder
         */
        "required": boolean;
        /**
          * Ajusta o tamanho em altura do componente: sm = 36px, md = 48px
         */
        "size": 'sm' | 'md';
        /**
          * Habilita o estado válido do Select
         */
        "success": boolean;
        /**
          * Para fins de performance o evento inputChange só é disparado em uma quantidade delimitada de tempo
         */
        "threshold": number;
        /**
          * Seta o valor do Select
         */
        "value": any;
        /**
          * Option do select padrão com valor vazio
         */
        "valueEmpty": boolean;
        /**
          * Estilo do Select
         */
        "variant": 'filled' | 'outlined';
    }
    interface ApolloSelectIcon {
        /**
          * aria-label
         */
        "ariaLabel": string;
        /**
          * disabled
         */
        "disabled": boolean;
    }
    interface ApolloSelectItem {
        /**
          * Desabilita o item
         */
        "disabled": boolean;
        /**
          * Adiciona estilo de seleção ao item
         */
        "selected": boolean;
        /**
          * Adiciona um valor ao item
         */
        "value": any;
    }
    interface ApolloSidebar {
        /**
          * Quando definido como verdadeiro, o `collapse` irá alternar para fechado
         */
        "collapsed": boolean;
    }
    interface ApolloSimpleGrid {
        /**
          * O número de colunas
         */
        "columns": ResponsiveProp<number>;
        /**
          * A largura na qual os elementos filho serão divididos em colunas. Passe um número para valores de pixel ou uma string para qualquer outro comprimento CSS válido.
         */
        "minChildWidth": ResponsiveProp<string>;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing": Spacing;
    }
    interface ApolloSkeleton {
        /**
          * Tipo de animação
         */
        "animation": 'progress' | 'progress-dark' | 'pulse' | 'false';
        /**
          * Quantidade de skeletons a serem carregados
         */
        "count": number;
        /**
          * Custom css styles (background/margins/width/height etc.)
         */
        "customStyles": { [key: string]: string } | string;
        /**
          * Altura do skeleton ex. 100px, 100%, auto etc.
         */
        "height": string;
        /**
          * Habilita os warnings para animações não suportadas
         */
        "showWarnings": boolean;
        /**
          * Tamanhos pré definidos, sobrescreve as propriedades width e height.
         */
        "size": 'sm' | 'md' | 'lg' | 'xlg' | 'xxlg' | 'xxxlg';
        /**
          * Seleciona valores padrões de um template definido no CSS
         */
        "templateWidth": boolean;
        /**
          * Estilo do skeleton
         */
        "variant": 'circle' | 'rect' | 'text' | 'pill';
        /**
          * Largura do skeleton ex. 100px, 100%, auto etc.
         */
        "width": string;
    }
    interface ApolloSnackbar {
        /**
          * Label do botão
         */
        "actionButtonLabel": string;
        /**
          * API para fechar o snackbar
         */
        "close": () => Promise<void>;
        /**
          * Ativa ênfase no snackbar
         */
        "emphasis": boolean;
        /**
          * Label da snackbar
         */
        "label": string;
        /**
          * API para abrir o snackbar
          * @param timeout tempo que o snackbar ficará visível em milisegundos. Deve ser maior que 4000 e menor 10000, ou -1 para desativar o timeout
         */
        "open": (timeout?: number) => Promise<void>;
        /**
          * Posição do snackbar
         */
        "position": 'baseline' | 'leading';
        /**
          * API para alterar a label do snackbar
         */
        "setLabel": (label: string) => Promise<void>;
        /**
          * Renderiza um botão com a função de fechar o snackbar quando clicado
         */
        "showDismissButton": boolean;
        /**
          * Renderiza o snackbar no modo stacked
         */
        "stacked": boolean;
        /**
          * Tipo do snackbar
         */
        "type": 'info' | 'done' | 'warning' | 'error';
    }
    interface ApolloStack {
        /**
          * Abreviação de propriedade de estilo `align-items`
         */
        "alignItems": Align;
        /**
          * Abreviação de propriedade de estilo `flex-direction`
         */
        "direction": Direction;
        /**
          * Abreviação de propriedade de estilo `justify-content`
         */
        "justify": Justify;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing": Spacing;
    }
    interface ApolloSwitchToggle {
        /**
          * Indica se o componente está selecionado
         */
        "checked": boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled": boolean;
        /**
          * Texto vinculado ao componente
         */
        "label": string;
        /**
          * nowrap
         */
        "nowrap": boolean;
        /**
          * Posição do texto com base no componente
         */
        "position": 'before' | 'after';
        /**
          * API que modifica o valor do componente
         */
        "setChecked": (checked: boolean) => Promise<void>;
        /**
          * API que habilita/desabilita o componente
         */
        "setDisabled": (disabled: boolean) => Promise<void>;
    }
    interface ApolloTemplateSkeleton {
        /**
          * Alinhamento dos skeletons
         */
        "align": 'center' | 'left' | 'right';
        /**
          * Define se o template irá exibir o skeleton de avatar
         */
        "avatar": boolean;
        /**
          * Tamanhos pré definidos para o avatar.
         */
        "avatarSize": 'sm' | 'md' | 'lg' | 'xlg' | 'xxlg' | 'xxxlg';
        /**
          * Quantidade de templates skeletons a serem carregados
         */
        "count": number;
        /**
          * Habilita os warnings
         */
        "showWarnings": boolean;
        /**
          * Quantidade de skeletons do tipo texto a serem carregados
         */
        "textCount": number;
        /**
          * Altura do skeleton ex. 100px, 100%, auto etc.
         */
        "textHeight": string;
        /**
          * Estilo do template skeleton
         */
        "textVariant": 'rect' | 'text' | 'pill';
    }
    interface ApolloText {
        /**
          * Cor de conteúdo
         */
        "color": ResponsiveProp<string>;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `fontSize`.
         */
        "fontSize": FontSize;
        /**
          * Abreviação de propriedade de estilo `fontWeight`
         */
        "fontWeight": FontWeight;
        /**
          * Passe `isTruncated` para renderizar reticência quando o texto exceder a largura.
         */
        "isTruncated": boolean;
        /**
          * Da mesma forma, que o `isTruncated` passe a propriedade `noOfLines` e defina-o com o número de linhas desejado.
         */
        "noOfLines": number;
        /**
          * Abreviação de prop no estilo `textAlign`
         */
        "textAlign": ResponsiveProp<TextAlign>;
    }
    interface ApolloTextfield {
        /**
          * Habilita a contagem de caracteres no canto inferior direito do input
         */
        "characterCounter": boolean;
        /**
          * Quando usado junto com o textarea ele limita a quantidade de colunas que o campo de texto deverá ter
         */
        "cols": number;
        /**
          * Habilita o estado desativado do input
         */
        "disabled": boolean;
        /**
          * Quando verdadeiro fixa a exibição do texto de ajuda mesmo que o campo não esteja em foco
         */
        "helperPersist": boolean;
        /**
          * Texto de ajuda
         */
        "helperText": string;
        /**
          * Id único do input
         */
        "idElement": string;
        /**
          * Fornece uma dica para navegadores de dispositivos com teclados na tela para ajudá-los a decidir qual teclado exibir
         */
        "inputmode": 'none' | 'text' | 'numeric' | 'tel' | 'decimal' | 'email' | 'url' | 'search';
        /**
          * Habilita o estado inválido do input
         */
        "invalid": boolean;
        /**
          * Label do input | Usado como placeholder ou float-label dependendo da configuração do componente
         */
        "label": string;
        /**
          * Ícone localizado na parte esquerda
         */
        "leadingIcon": boolean;
        /**
          * Define as máscaras nas entradas
         */
        "mask": string;
        /**
          * Define os tipos de máscaras já estabelecidas Formatos: cep - 99999-999 date - 99/99/9999 cpf - 999.999.999-99 cnpj - 99.999.999/9999-99 tel - (99) 9999-9999 cel - (99) 99999-9999 currency - 999.999.999,99
         */
        "maskVariant": string | string[];
        /**
          * Quando usado junto com o type: number ele limita o valor máximo do campo nas interações do usuário com os botões de ação do tipo numérico, mas não faz validação se o usuário digitar uma informação inválida
         */
        "max": string;
        /**
          * Quando usado junto com o characterCounter ele limita a quantidade máxima de caracteres
         */
        "maxLength": string;
        /**
          * Quando usado junto com o type: number ele limita o valor mínimo do campo nas interações do usuário, mas não faz validação se o usuário digitar uma informação inválida
         */
        "min": string;
        /**
          * Limita a quantidade minima de caracteres
         */
        "minLength": string;
        /**
          * Referência do input nativo
         */
        "name": string;
        /**
          * Deixa o label apenas como placeholder
         */
        "noFloatingLabel": boolean;
        /**
          * Habilita o estado read-only do input
         */
        "readonly": boolean;
        /**
          * Marca o campo como obrigatório e adiciona um * no final do label/placeholder
         */
        "required": boolean;
        /**
          * Quando usado junto com o textarea ele limita a quantidade de linhas que o campo de texto deverá ter
         */
        "rows": number;
        /**
          * Ajusta o tamanho em altura do componente: sm = 36px, md = 48px
         */
        "size": 'sm' | 'md';
        /**
          * Quando usado junto com o type: number ele altera o valor de incremento e decremento nas interações do usuário com os botões de ação do tipo numérico
         */
        "step": string;
        /**
          * Habilita o estado válido do input
         */
        "success": boolean;
        /**
          * Transforma o input em um textarea
         */
        "textarea": boolean;
        /**
          * Para fins de performance o evento inputChange só é disparado em uma quantidade delimitada de tempo
         */
        "threshold": number;
        /**
          * Ícone localizado na parte direita para limpar o input
         */
        "trailingClearIcon": boolean;
        /**
          * Ícone localizado na parte direita
         */
        "trailingIcon": boolean;
        /**
          * Tipo de dado do input | Estende os tipos em formato de texto do HTMLInput
         */
        "type": 'text' | 'email' | 'password' | 'tel' | 'search' | 'number' | 'url' | 'date';
        /**
          * Value do input sem os caracteres especiais das máscaras Caracteres a serem removidos: - / ( ) . : space + ,
          * @ [ ] " '
         */
        "unmaskedValue": string;
        /**
          * Seta o valor do input
         */
        "value": string;
        /**
          * Texto fixo localizado antes do campo de input
         */
        "valuePrefix": string;
        /**
          * Texto fixo localizado após o campo de input
         */
        "valueSuffix": string;
        /**
          * Estilo do input
         */
        "variant": 'filled' | 'outlined';
    }
    interface ApolloTextfieldIcon {
        /**
          * aria-label
         */
        "ariaLabel": string;
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * type
         */
        "type": 'leading' | 'trailing';
    }
    interface ApolloToggleButton {
        /**
          * Estado do botão
         */
        "checked": boolean;
        /**
          * API para alterar o toggle
         */
        "setChecked": (checked: boolean) => Promise<void>;
        /**
          * Tamanho do botão
         */
        "size": 'sm' | 'md';
        /**
          * Ícone do botão com estado de toggle Off
         */
        "toggleOffIcon": string;
        /**
          * Label do botão com estado de toggle off
         */
        "toggleOffLabel": string;
        /**
          * Ícone do botão com estado de toggle Off
         */
        "toggleOffTypeIcon": string;
        /**
          * Ícone do botão com estado de toggle on
         */
        "toggleOnIcon": string;
        /**
          * Label do botão com estado de toggle on
         */
        "toggleOnLabel": string;
        /**
          * Ícone do botão com estado de toggle on
         */
        "toggleOnTypeIcon": string;
    }
    interface ApolloToolbar {
        /**
          * Adiciona um campo de pesquisa principal
         */
        "isSearch": boolean;
    }
    interface ApolloToolbarActions {
    }
    interface ApolloTooltip {
        /**
          * Texto do tooltip
         */
        "description": string;
        /**
          * É um link externo?
         */
        "isExternal": boolean;
        /**
          * label do link
         */
        "linkLabel": string;
        /**
          * link
         */
        "linkUrl": string;
        /**
          * Margin ao ocorrer overflow
         */
        "margin": number;
        /**
          * Espaçamento do tooltip e o elemento chave
         */
        "offset": number;
        /**
          * Posição do tooltip
         */
        "placement": | 'top'
        | 'top-start'
        | 'top-end'
        | 'bottom'
        | 'bottom-start'
        | 'bottom-end'
        | 'right'
        | 'right-start'
        | 'right-end'
        | 'left'
        | 'left-start'
        | 'left-end';
        /**
          * Tamanho do Potooltip
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * Título do tooltip
         */
        "titleText": string;
    }
    interface ApolloWrap {
        /**
          * Abreviação de propriedade de estilo `align-items`
         */
        "alignItems": Align;
        /**
          * Abreviação de propriedade de estilo `flex-direction`
         */
        "direction": Direction;
        /**
          * Abreviação de propriedade de estilo `justify-content`
         */
        "justify": Justify;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing": Spacing;
    }
    interface TextfieldCharacterCounter {
    }
    interface TextfieldHelperText {
        /**
          * invalid
         */
        "invalid": boolean;
        /**
          * persist
         */
        "persist": boolean;
        /**
          * text
         */
        "text": string;
    }
}
declare global {
    interface HTMLApolloAvatarElement extends Components.ApolloAvatar, HTMLStencilElement {
    }
    var HTMLApolloAvatarElement: {
        prototype: HTMLApolloAvatarElement;
        new (): HTMLApolloAvatarElement;
    };
    interface HTMLApolloBadgeElement extends Components.ApolloBadge, HTMLStencilElement {
    }
    var HTMLApolloBadgeElement: {
        prototype: HTMLApolloBadgeElement;
        new (): HTMLApolloBadgeElement;
    };
    interface HTMLApolloBoxElement extends Components.ApolloBox, HTMLStencilElement {
    }
    var HTMLApolloBoxElement: {
        prototype: HTMLApolloBoxElement;
        new (): HTMLApolloBoxElement;
    };
    interface HTMLApolloButtonElement extends Components.ApolloButton, HTMLStencilElement {
    }
    var HTMLApolloButtonElement: {
        prototype: HTMLApolloButtonElement;
        new (): HTMLApolloButtonElement;
    };
    interface HTMLApolloCardElement extends Components.ApolloCard, HTMLStencilElement {
    }
    var HTMLApolloCardElement: {
        prototype: HTMLApolloCardElement;
        new (): HTMLApolloCardElement;
    };
    interface HTMLApolloCardActionButtonsElement extends Components.ApolloCardActionButtons, HTMLStencilElement {
    }
    var HTMLApolloCardActionButtonsElement: {
        prototype: HTMLApolloCardActionButtonsElement;
        new (): HTMLApolloCardActionButtonsElement;
    };
    interface HTMLApolloCardActionIconsElement extends Components.ApolloCardActionIcons, HTMLStencilElement {
    }
    var HTMLApolloCardActionIconsElement: {
        prototype: HTMLApolloCardActionIconsElement;
        new (): HTMLApolloCardActionIconsElement;
    };
    interface HTMLApolloCardActionsElement extends Components.ApolloCardActions, HTMLStencilElement {
    }
    var HTMLApolloCardActionsElement: {
        prototype: HTMLApolloCardActionsElement;
        new (): HTMLApolloCardActionsElement;
    };
    interface HTMLApolloCardContentElement extends Components.ApolloCardContent, HTMLStencilElement {
    }
    var HTMLApolloCardContentElement: {
        prototype: HTMLApolloCardContentElement;
        new (): HTMLApolloCardContentElement;
    };
    interface HTMLApolloCardMediaElement extends Components.ApolloCardMedia, HTMLStencilElement {
    }
    var HTMLApolloCardMediaElement: {
        prototype: HTMLApolloCardMediaElement;
        new (): HTMLApolloCardMediaElement;
    };
    interface HTMLApolloCardMediaContentElement extends Components.ApolloCardMediaContent, HTMLStencilElement {
    }
    var HTMLApolloCardMediaContentElement: {
        prototype: HTMLApolloCardMediaContentElement;
        new (): HTMLApolloCardMediaContentElement;
    };
    interface HTMLApolloCenterElement extends Components.ApolloCenter, HTMLStencilElement {
    }
    var HTMLApolloCenterElement: {
        prototype: HTMLApolloCenterElement;
        new (): HTMLApolloCenterElement;
    };
    interface HTMLApolloCheckboxElement extends Components.ApolloCheckbox, HTMLStencilElement {
    }
    var HTMLApolloCheckboxElement: {
        prototype: HTMLApolloCheckboxElement;
        new (): HTMLApolloCheckboxElement;
    };
    interface HTMLApolloCircularProgressElement extends Components.ApolloCircularProgress, HTMLStencilElement {
    }
    var HTMLApolloCircularProgressElement: {
        prototype: HTMLApolloCircularProgressElement;
        new (): HTMLApolloCircularProgressElement;
    };
    interface HTMLApolloCollapseElement extends Components.ApolloCollapse, HTMLStencilElement {
    }
    var HTMLApolloCollapseElement: {
        prototype: HTMLApolloCollapseElement;
        new (): HTMLApolloCollapseElement;
    };
    interface HTMLApolloContainerElement extends Components.ApolloContainer, HTMLStencilElement {
    }
    var HTMLApolloContainerElement: {
        prototype: HTMLApolloContainerElement;
        new (): HTMLApolloContainerElement;
    };
    interface HTMLApolloDialogElement extends Components.ApolloDialog, HTMLStencilElement {
    }
    var HTMLApolloDialogElement: {
        prototype: HTMLApolloDialogElement;
        new (): HTMLApolloDialogElement;
    };
    interface HTMLApolloFeedbackButtonElement extends Components.ApolloFeedbackButton, HTMLStencilElement {
    }
    var HTMLApolloFeedbackButtonElement: {
        prototype: HTMLApolloFeedbackButtonElement;
        new (): HTMLApolloFeedbackButtonElement;
    };
    interface HTMLApolloFeedbackCardElement extends Components.ApolloFeedbackCard, HTMLStencilElement {
    }
    var HTMLApolloFeedbackCardElement: {
        prototype: HTMLApolloFeedbackCardElement;
        new (): HTMLApolloFeedbackCardElement;
    };
    interface HTMLApolloFeedbackDialogElement extends Components.ApolloFeedbackDialog, HTMLStencilElement {
    }
    var HTMLApolloFeedbackDialogElement: {
        prototype: HTMLApolloFeedbackDialogElement;
        new (): HTMLApolloFeedbackDialogElement;
    };
    interface HTMLApolloFeedbackPageElement extends Components.ApolloFeedbackPage, HTMLStencilElement {
    }
    var HTMLApolloFeedbackPageElement: {
        prototype: HTMLApolloFeedbackPageElement;
        new (): HTMLApolloFeedbackPageElement;
    };
    interface HTMLApolloFeedbackPageActionsElement extends Components.ApolloFeedbackPageActions, HTMLStencilElement {
    }
    var HTMLApolloFeedbackPageActionsElement: {
        prototype: HTMLApolloFeedbackPageActionsElement;
        new (): HTMLApolloFeedbackPageActionsElement;
    };
    interface HTMLApolloFeedbackPageContentElement extends Components.ApolloFeedbackPageContent, HTMLStencilElement {
    }
    var HTMLApolloFeedbackPageContentElement: {
        prototype: HTMLApolloFeedbackPageContentElement;
        new (): HTMLApolloFeedbackPageContentElement;
    };
    interface HTMLApolloFlexElement extends Components.ApolloFlex, HTMLStencilElement {
    }
    var HTMLApolloFlexElement: {
        prototype: HTMLApolloFlexElement;
        new (): HTMLApolloFlexElement;
    };
    interface HTMLApolloGhostElementElement extends Components.ApolloGhostElement, HTMLStencilElement {
    }
    var HTMLApolloGhostElementElement: {
        prototype: HTMLApolloGhostElementElement;
        new (): HTMLApolloGhostElementElement;
    };
    interface HTMLApolloGridElement extends Components.ApolloGrid, HTMLStencilElement {
    }
    var HTMLApolloGridElement: {
        prototype: HTMLApolloGridElement;
        new (): HTMLApolloGridElement;
    };
    interface HTMLApolloGridItemElement extends Components.ApolloGridItem, HTMLStencilElement {
    }
    var HTMLApolloGridItemElement: {
        prototype: HTMLApolloGridItemElement;
        new (): HTMLApolloGridItemElement;
    };
    interface HTMLApolloHeaderElement extends Components.ApolloHeader, HTMLStencilElement {
    }
    var HTMLApolloHeaderElement: {
        prototype: HTMLApolloHeaderElement;
        new (): HTMLApolloHeaderElement;
    };
    interface HTMLApolloHeadingElement extends Components.ApolloHeading, HTMLStencilElement {
    }
    var HTMLApolloHeadingElement: {
        prototype: HTMLApolloHeadingElement;
        new (): HTMLApolloHeadingElement;
    };
    interface HTMLApolloIconElement extends Components.ApolloIcon, HTMLStencilElement {
    }
    var HTMLApolloIconElement: {
        prototype: HTMLApolloIconElement;
        new (): HTMLApolloIconElement;
    };
    interface HTMLApolloIconButtonElement extends Components.ApolloIconButton, HTMLStencilElement {
    }
    var HTMLApolloIconButtonElement: {
        prototype: HTMLApolloIconButtonElement;
        new (): HTMLApolloIconButtonElement;
    };
    interface HTMLApolloLinkElement extends Components.ApolloLink, HTMLStencilElement {
    }
    var HTMLApolloLinkElement: {
        prototype: HTMLApolloLinkElement;
        new (): HTMLApolloLinkElement;
    };
    interface HTMLApolloListElement extends Components.ApolloList, HTMLStencilElement {
    }
    var HTMLApolloListElement: {
        prototype: HTMLApolloListElement;
        new (): HTMLApolloListElement;
    };
    interface HTMLApolloListDividerElement extends Components.ApolloListDivider, HTMLStencilElement {
    }
    var HTMLApolloListDividerElement: {
        prototype: HTMLApolloListDividerElement;
        new (): HTMLApolloListDividerElement;
    };
    interface HTMLApolloListGroupElement extends Components.ApolloListGroup, HTMLStencilElement {
    }
    var HTMLApolloListGroupElement: {
        prototype: HTMLApolloListGroupElement;
        new (): HTMLApolloListGroupElement;
    };
    interface HTMLApolloListItemElement extends Components.ApolloListItem, HTMLStencilElement {
    }
    var HTMLApolloListItemElement: {
        prototype: HTMLApolloListItemElement;
        new (): HTMLApolloListItemElement;
    };
    interface HTMLApolloLogoElement extends Components.ApolloLogo, HTMLStencilElement {
    }
    var HTMLApolloLogoElement: {
        prototype: HTMLApolloLogoElement;
        new (): HTMLApolloLogoElement;
    };
    interface HTMLApolloMenuElement extends Components.ApolloMenu, HTMLStencilElement {
    }
    var HTMLApolloMenuElement: {
        prototype: HTMLApolloMenuElement;
        new (): HTMLApolloMenuElement;
    };
    interface HTMLApolloMenuItemElement extends Components.ApolloMenuItem, HTMLStencilElement {
    }
    var HTMLApolloMenuItemElement: {
        prototype: HTMLApolloMenuItemElement;
        new (): HTMLApolloMenuItemElement;
    };
    interface HTMLApolloModalElement extends Components.ApolloModal, HTMLStencilElement {
    }
    var HTMLApolloModalElement: {
        prototype: HTMLApolloModalElement;
        new (): HTMLApolloModalElement;
    };
    interface HTMLApolloNavItemElement extends Components.ApolloNavItem, HTMLStencilElement {
    }
    var HTMLApolloNavItemElement: {
        prototype: HTMLApolloNavItemElement;
        new (): HTMLApolloNavItemElement;
    };
    interface HTMLApolloPageElement extends Components.ApolloPage, HTMLStencilElement {
    }
    var HTMLApolloPageElement: {
        prototype: HTMLApolloPageElement;
        new (): HTMLApolloPageElement;
    };
    interface HTMLApolloProgressBarElement extends Components.ApolloProgressBar, HTMLStencilElement {
    }
    var HTMLApolloProgressBarElement: {
        prototype: HTMLApolloProgressBarElement;
        new (): HTMLApolloProgressBarElement;
    };
    interface HTMLApolloRadioElement extends Components.ApolloRadio, HTMLStencilElement {
    }
    var HTMLApolloRadioElement: {
        prototype: HTMLApolloRadioElement;
        new (): HTMLApolloRadioElement;
    };
    interface HTMLApolloRippleElement extends Components.ApolloRipple, HTMLStencilElement {
    }
    var HTMLApolloRippleElement: {
        prototype: HTMLApolloRippleElement;
        new (): HTMLApolloRippleElement;
    };
    interface HTMLApolloSearchBarElement extends Components.ApolloSearchBar, HTMLStencilElement {
    }
    var HTMLApolloSearchBarElement: {
        prototype: HTMLApolloSearchBarElement;
        new (): HTMLApolloSearchBarElement;
    };
    interface HTMLApolloSelectElement extends Components.ApolloSelect, HTMLStencilElement {
    }
    var HTMLApolloSelectElement: {
        prototype: HTMLApolloSelectElement;
        new (): HTMLApolloSelectElement;
    };
    interface HTMLApolloSelectIconElement extends Components.ApolloSelectIcon, HTMLStencilElement {
    }
    var HTMLApolloSelectIconElement: {
        prototype: HTMLApolloSelectIconElement;
        new (): HTMLApolloSelectIconElement;
    };
    interface HTMLApolloSelectItemElement extends Components.ApolloSelectItem, HTMLStencilElement {
    }
    var HTMLApolloSelectItemElement: {
        prototype: HTMLApolloSelectItemElement;
        new (): HTMLApolloSelectItemElement;
    };
    interface HTMLApolloSidebarElement extends Components.ApolloSidebar, HTMLStencilElement {
    }
    var HTMLApolloSidebarElement: {
        prototype: HTMLApolloSidebarElement;
        new (): HTMLApolloSidebarElement;
    };
    interface HTMLApolloSimpleGridElement extends Components.ApolloSimpleGrid, HTMLStencilElement {
    }
    var HTMLApolloSimpleGridElement: {
        prototype: HTMLApolloSimpleGridElement;
        new (): HTMLApolloSimpleGridElement;
    };
    interface HTMLApolloSkeletonElement extends Components.ApolloSkeleton, HTMLStencilElement {
    }
    var HTMLApolloSkeletonElement: {
        prototype: HTMLApolloSkeletonElement;
        new (): HTMLApolloSkeletonElement;
    };
    interface HTMLApolloSnackbarElement extends Components.ApolloSnackbar, HTMLStencilElement {
    }
    var HTMLApolloSnackbarElement: {
        prototype: HTMLApolloSnackbarElement;
        new (): HTMLApolloSnackbarElement;
    };
    interface HTMLApolloStackElement extends Components.ApolloStack, HTMLStencilElement {
    }
    var HTMLApolloStackElement: {
        prototype: HTMLApolloStackElement;
        new (): HTMLApolloStackElement;
    };
    interface HTMLApolloSwitchToggleElement extends Components.ApolloSwitchToggle, HTMLStencilElement {
    }
    var HTMLApolloSwitchToggleElement: {
        prototype: HTMLApolloSwitchToggleElement;
        new (): HTMLApolloSwitchToggleElement;
    };
    interface HTMLApolloTemplateSkeletonElement extends Components.ApolloTemplateSkeleton, HTMLStencilElement {
    }
    var HTMLApolloTemplateSkeletonElement: {
        prototype: HTMLApolloTemplateSkeletonElement;
        new (): HTMLApolloTemplateSkeletonElement;
    };
    interface HTMLApolloTextElement extends Components.ApolloText, HTMLStencilElement {
    }
    var HTMLApolloTextElement: {
        prototype: HTMLApolloTextElement;
        new (): HTMLApolloTextElement;
    };
    interface HTMLApolloTextfieldElement extends Components.ApolloTextfield, HTMLStencilElement {
    }
    var HTMLApolloTextfieldElement: {
        prototype: HTMLApolloTextfieldElement;
        new (): HTMLApolloTextfieldElement;
    };
    interface HTMLApolloTextfieldIconElement extends Components.ApolloTextfieldIcon, HTMLStencilElement {
    }
    var HTMLApolloTextfieldIconElement: {
        prototype: HTMLApolloTextfieldIconElement;
        new (): HTMLApolloTextfieldIconElement;
    };
    interface HTMLApolloToggleButtonElement extends Components.ApolloToggleButton, HTMLStencilElement {
    }
    var HTMLApolloToggleButtonElement: {
        prototype: HTMLApolloToggleButtonElement;
        new (): HTMLApolloToggleButtonElement;
    };
    interface HTMLApolloToolbarElement extends Components.ApolloToolbar, HTMLStencilElement {
    }
    var HTMLApolloToolbarElement: {
        prototype: HTMLApolloToolbarElement;
        new (): HTMLApolloToolbarElement;
    };
    interface HTMLApolloToolbarActionsElement extends Components.ApolloToolbarActions, HTMLStencilElement {
    }
    var HTMLApolloToolbarActionsElement: {
        prototype: HTMLApolloToolbarActionsElement;
        new (): HTMLApolloToolbarActionsElement;
    };
    interface HTMLApolloTooltipElement extends Components.ApolloTooltip, HTMLStencilElement {
    }
    var HTMLApolloTooltipElement: {
        prototype: HTMLApolloTooltipElement;
        new (): HTMLApolloTooltipElement;
    };
    interface HTMLApolloWrapElement extends Components.ApolloWrap, HTMLStencilElement {
    }
    var HTMLApolloWrapElement: {
        prototype: HTMLApolloWrapElement;
        new (): HTMLApolloWrapElement;
    };
    interface HTMLTextfieldCharacterCounterElement extends Components.TextfieldCharacterCounter, HTMLStencilElement {
    }
    var HTMLTextfieldCharacterCounterElement: {
        prototype: HTMLTextfieldCharacterCounterElement;
        new (): HTMLTextfieldCharacterCounterElement;
    };
    interface HTMLTextfieldHelperTextElement extends Components.TextfieldHelperText, HTMLStencilElement {
    }
    var HTMLTextfieldHelperTextElement: {
        prototype: HTMLTextfieldHelperTextElement;
        new (): HTMLTextfieldHelperTextElement;
    };
    interface HTMLElementTagNameMap {
        "apollo-avatar": HTMLApolloAvatarElement;
        "apollo-badge": HTMLApolloBadgeElement;
        "apollo-box": HTMLApolloBoxElement;
        "apollo-button": HTMLApolloButtonElement;
        "apollo-card": HTMLApolloCardElement;
        "apollo-card-action-buttons": HTMLApolloCardActionButtonsElement;
        "apollo-card-action-icons": HTMLApolloCardActionIconsElement;
        "apollo-card-actions": HTMLApolloCardActionsElement;
        "apollo-card-content": HTMLApolloCardContentElement;
        "apollo-card-media": HTMLApolloCardMediaElement;
        "apollo-card-media-content": HTMLApolloCardMediaContentElement;
        "apollo-center": HTMLApolloCenterElement;
        "apollo-checkbox": HTMLApolloCheckboxElement;
        "apollo-circular-progress": HTMLApolloCircularProgressElement;
        "apollo-collapse": HTMLApolloCollapseElement;
        "apollo-container": HTMLApolloContainerElement;
        "apollo-dialog": HTMLApolloDialogElement;
        "apollo-feedback-button": HTMLApolloFeedbackButtonElement;
        "apollo-feedback-card": HTMLApolloFeedbackCardElement;
        "apollo-feedback-dialog": HTMLApolloFeedbackDialogElement;
        "apollo-feedback-page": HTMLApolloFeedbackPageElement;
        "apollo-feedback-page-actions": HTMLApolloFeedbackPageActionsElement;
        "apollo-feedback-page-content": HTMLApolloFeedbackPageContentElement;
        "apollo-flex": HTMLApolloFlexElement;
        "apollo-ghost-element": HTMLApolloGhostElementElement;
        "apollo-grid": HTMLApolloGridElement;
        "apollo-grid-item": HTMLApolloGridItemElement;
        "apollo-header": HTMLApolloHeaderElement;
        "apollo-heading": HTMLApolloHeadingElement;
        "apollo-icon": HTMLApolloIconElement;
        "apollo-icon-button": HTMLApolloIconButtonElement;
        "apollo-link": HTMLApolloLinkElement;
        "apollo-list": HTMLApolloListElement;
        "apollo-list-divider": HTMLApolloListDividerElement;
        "apollo-list-group": HTMLApolloListGroupElement;
        "apollo-list-item": HTMLApolloListItemElement;
        "apollo-logo": HTMLApolloLogoElement;
        "apollo-menu": HTMLApolloMenuElement;
        "apollo-menu-item": HTMLApolloMenuItemElement;
        "apollo-modal": HTMLApolloModalElement;
        "apollo-nav-item": HTMLApolloNavItemElement;
        "apollo-page": HTMLApolloPageElement;
        "apollo-progress-bar": HTMLApolloProgressBarElement;
        "apollo-radio": HTMLApolloRadioElement;
        "apollo-ripple": HTMLApolloRippleElement;
        "apollo-search-bar": HTMLApolloSearchBarElement;
        "apollo-select": HTMLApolloSelectElement;
        "apollo-select-icon": HTMLApolloSelectIconElement;
        "apollo-select-item": HTMLApolloSelectItemElement;
        "apollo-sidebar": HTMLApolloSidebarElement;
        "apollo-simple-grid": HTMLApolloSimpleGridElement;
        "apollo-skeleton": HTMLApolloSkeletonElement;
        "apollo-snackbar": HTMLApolloSnackbarElement;
        "apollo-stack": HTMLApolloStackElement;
        "apollo-switch-toggle": HTMLApolloSwitchToggleElement;
        "apollo-template-skeleton": HTMLApolloTemplateSkeletonElement;
        "apollo-text": HTMLApolloTextElement;
        "apollo-textfield": HTMLApolloTextfieldElement;
        "apollo-textfield-icon": HTMLApolloTextfieldIconElement;
        "apollo-toggle-button": HTMLApolloToggleButtonElement;
        "apollo-toolbar": HTMLApolloToolbarElement;
        "apollo-toolbar-actions": HTMLApolloToolbarActionsElement;
        "apollo-tooltip": HTMLApolloTooltipElement;
        "apollo-wrap": HTMLApolloWrapElement;
        "textfield-character-counter": HTMLTextfieldCharacterCounterElement;
        "textfield-helper-text": HTMLTextfieldHelperTextElement;
    }
}
declare namespace LocalJSX {
    interface ApolloAvatar {
        /**
          * Alt da imagem do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "alt"?: string;
        /**
          * Borda do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "border"?: 'none' | 'light' | 'medium' | 'strong';
        /**
          * Radius do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "radius"?: 'none' | 'light' | 'medium' | 'strong' | 'full';
        /**
          * Tamanho do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "size"?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Imagem do avatar
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "src"?: string;
    }
    interface ApolloBadge {
        /**
          * Number
         */
        "quantity"?: string | number;
        /**
          * Type of badge
         */
        "variant"?: 'numeric' | 'simple';
    }
    interface ApolloBox {
        /**
          * Abreviação de prop no estilo `alignItems`
         */
        "alignItems"?: Align;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "backgroundColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "bg"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderWidth`
         */
        "border"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderBottom`
         */
        "borderBottom"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderBottomColor`
         */
        "borderBottomColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderBottomLeftBottom`
         */
        "borderBottomLeftRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomRightRadius` and `borderBottomLeftRadius`
         */
        "borderBottomRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomRightRadius`
         */
        "borderBottomRightRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderBottomWidth`
         */
        "borderBottomWidth"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderColor`
         */
        "borderColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderLeft`
         */
        "borderLeft"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderLeftColor`
         */
        "borderLeftColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius` and `borderBottomLeftRadius`
         */
        "borderLeftRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderLeftWidth`
         */
        "borderLeftWidth"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderRadius`
         */
        "borderRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderRight`
         */
        "borderRight"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderRightColor`
         */
        "borderRightColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopRightRadius` and `borderBottomRightRadius`
         */
        "borderRightRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderRightWidth`
         */
        "borderRightWidth"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTop`
         */
        "borderTop"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTopColor`
         */
        "borderTopColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius`
         */
        "borderTopLeftRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopLeftRadius` and `borderTopRightRadius`
         */
        "borderTopRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopRightRadius`
         */
        "borderTopRightRadius"?: BorderRadius;
        /**
          * Abreviação de propriedade de estilo `borderTopWidth`
         */
        "borderTopWidth"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderWidth`
         */
        "borderWidth"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderLeft` and `borderRight`
         */
        "borderX"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `borderTop` and `borderBottom`
         */
        "borderY"?: BorderWidth;
        /**
          * Abreviação de propriedade de estilo `boxShadow`
         */
        "boxShadow"?: Shadow;
        /**
          * Abreviação de propriedade de estilo `color`
         */
        "color"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `display`
         */
        "display"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `fontSize`
         */
        "fontSize"?: FontSize;
        /**
          * Abreviação de propriedade de estilo `fontWeight`
         */
        "fontWeight"?: FontWeight;
        /**
          * Abreviação de propriedade de estilo `height`
         */
        "height"?: ResponsiveProp<string>;
        /**
          * Abreviação de prop de estilo `justifyContent`
         */
        "justify"?: Justify;
        /**
          * Abreviação de propriedade de estilo `lineHeight`
         */
        "lineHeight"?: LineHeight;
        /**
          * Abreviação de propriedade de estilo `margin`
         */
        "m"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `margin`
         */
        "margin"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginBottom`
         */
        "marginBottom"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginLeft`
         */
        "marginLeft"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginRight`
         */
        "marginRight"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginTop`
         */
        "marginTop"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `maxHeight`
         */
        "maxH"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `maxWidth`
         */
        "maxW"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `marginBottom`
         */
        "mb"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `minHeight`
         */
        "minH"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `minWidth`
         */
        "minW"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `marginLeft`
         */
        "ml"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginRight`
         */
        "mr"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `marginTop`
         */
        "mt"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `opacity`
         */
        "opacity"?: Opacity;
        /**
          * Abreviação de propriedade de estilo `padding`
         */
        "p"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `padding`
         */
        "padding"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingBottom`
         */
        "paddingBottom"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingLeft`
         */
        "paddingLeft"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingRight`
         */
        "paddingRight"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingTop`
         */
        "paddingTop"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingBottom`
         */
        "pb"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingLeft`
         */
        "pl"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingRight`
         */
        "pr"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `paddingTop`
         */
        "pt"?: Spacing;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "width"?: ResponsiveProp<string>;
    }
    interface ApolloButton {
        /**
          * Botão em bloco
         */
        "block"?: boolean;
        /**
          * Botão no formato danger
         */
        "danger"?: boolean;
        /**
          * Desabilita o botão
         */
        "disabled"?: boolean;
        /**
          * Página de destino quando clicado
         */
        "href"?: string;
        /**
          * Habilita o loading no botão
         */
        "loading"?: boolean;
        /**
          * Referência do name nativo
         */
        "name"?: string;
        /**
          * Feedback tátil
         */
        "ripple"?: boolean;
        /**
          * Botão redondo
         */
        "round"?: boolean;
        /**
          * Tamanho do botão
         */
        "size"?: 'sm' | 'md';
        /**
          * Define se a URL passada no href vai ser aberta na mesma aba ou não
         */
        "target"?: '_blank' | '_self';
        /**
          * Referência do type nativo
         */
        "type"?: 'button' | 'submit' | 'menu' | 'reset';
        /**
          * Referência do value nativo
         */
        "value"?: string;
        /**
          * O estilo do botão
         */
        "variant"?: 'link' | 'raised' | 'outlined' | 'unelevated';
    }
    interface ApolloCard {
        /**
          * Propriedade para controlar border-radius do componente.
         */
        "radius"?: 'light' | 'medium' | 'strong';
        /**
          * O estilo do card
         */
        "variant"?: 'outlined' | 'unelevated';
    }
    interface ApolloCardActionButtons {
    }
    interface ApolloCardActionIcons {
    }
    interface ApolloCardActions {
    }
    interface ApolloCardContent {
    }
    interface ApolloCardMedia {
        /**
          * Escala automaticamente a altura da área de mídia de acordo com sua largura, mantendo uma proporção quadrada ou 16:9.
         */
        "format"?: 'square' | '16:9' | '1:1';
        /**
          * Escala automaticamente a altura da área de mídia de acordo com sua largura, mantendo uma proporção quadrada ou 16:9.
         */
        "image"?: string;
    }
    interface ApolloCardMediaContent {
    }
    interface ApolloCenter {
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "backgroundColor"?: ResponsiveProp<string>;
        /**
          * Abreviação de propriedade de estilo `backgroundColor`
         */
        "bg"?: ResponsiveProp<string>;
        /**
          * Altura do box
         */
        "height"?: ResponsiveProp<string>;
        /**
          * Largura do box
         */
        "width"?: ResponsiveProp<string>;
    }
    interface ApolloCheckbox {
        /**
          * Indica se o componente está selecionado
         */
        "checked"?: boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled"?: boolean;
        /**
          * Habilita/Desabilita o estado indeterminado do componente
         */
        "indeterminate"?: boolean;
        /**
          * Habilita o estado inválido do input
         */
        "invalid"?: boolean;
        /**
          * Referência do input nativo
         */
        "name"?: string;
        /**
          * nowrap
         */
        "nowrap"?: boolean;
        /**
          * Evento disparado quando o componente perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<null>) => void;
        /**
          * Evento disparado quando o valor do componente muda
         */
        "onApolloChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Posição do texto com base no componente
         */
        "position"?: 'before' | 'after';
    }
    interface ApolloCircularProgress {
        /**
          * Deixa o componente em estado fixo
         */
        "determinate"?: boolean;
        /**
          * Aplica a cor branca na linha
         */
        "invert"?: boolean;
        /**
          * Texto de ajuda para acessibilidade
         */
        "label"?: string;
        /**
          * Tamanho do progresso. Min: 0 | Max: 1
         */
        "progress"?: number;
        /**
          * Raio do circulo
         */
        "radius"?: number;
        /**
          * Largura da linha
         */
        "stroke"?: number;
    }
    interface ApolloCollapse {
        /**
          * Quando definido como verdadeiro, o `collapse` irá alternar aberto
         */
        "collapsed"?: boolean;
    }
    interface ApolloContainer {
        /**
          * Se for `true`, o container centralizará seus filhos independentemente de sua largura.
         */
        "centerContent"?: boolean;
        /**
          * A largura de um container fluído é limitada pelo valor da propriedade `maxW`.
         */
        "fluid"?: boolean;
        /**
          * Determine a largura máxima do container. A largura do container aumenta com o tamanho da tela.
         */
        "maxW"?: Size;
    }
    interface ApolloDialog {
        /**
          * Label do botão cancelar
         */
        "cancelButtonLabel"?: string;
        /**
          * Label do botão confirmar
         */
        "confirmButtonLabel"?: string;
        /**
          * Subtitulo do dialog
         */
        "dialogSubtitle"?: string;
        /**
          * Título do dialog
         */
        "dialogTitle"?: string;
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "figure"?: string;
        /**
          * Ícone da dialog
         */
        "icon"?: string;
        /**
          * Evento disparado quando o botão de cancel for clicado
         */
        "onCancelButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Evento disparado quando o botão de confirm for clicado
         */
        "onConfirmButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
    }
    interface ApolloFeedbackButton {
        /**
          * Estado do botão
         */
        "checked"?: boolean;
        /**
          * Aplica um delay para o botão voltar ao estado inicial
         */
        "delay"?: number;
        /**
          * Evento disparado quando o toggle é clickado
         */
        "onToggleChange"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Tamanho do botão
         */
        "size"?: 'sm' | 'md';
        /**
          * Label do botão com estado de toggle off
         */
        "toggleOffLabel"?: string;
        /**
          * Label do botão com estado de toggle on
         */
        "toggleOnLabel"?: string;
    }
    interface ApolloFeedbackCard {
        /**
          * Ativa ênfase no card
         */
        "emphasis"?: boolean;
        /**
          * Label do card
         */
        "label"?: string;
        /**
          * Renderiza o card no modo stacked
         */
        "stacked"?: boolean;
        /**
          * Tipo do card
         */
        "type"?: 'info' | 'done' | 'warning' | 'error';
    }
    interface ApolloFeedbackDialog {
        /**
          * Label do botão cancelar
         */
        "cancelButtonLabel"?: string;
        /**
          * Label do botão confirmar
         */
        "confirmButtonLabel"?: string;
        /**
          * Subtitulo do dialog
         */
        "dialogSubtitle"?: string;
        /**
          * Título do dialog
         */
        "dialogTitle"?: string;
        /**
          * Evento disparado quando o botão de cancel for clicado
         */
        "onCancelFeedbackButtonClick"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Evento disparado quando o botão de confirm for clicado
         */
        "onConfirmFeedbackButtonClick"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Tipo do dialog
         */
        "type"?: 'info' | 'done' | 'warning' | 'error';
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "useFigureVersionForMobile"?: boolean;
    }
    interface ApolloFeedbackPage {
        /**
          * Subtítulo da feedback page
         */
        "pageSubtitle"?: string;
        /**
          * Título da feedback page
         */
        "pageTitle"?: string;
        /**
          * Tipo da feedback page
         */
        "type"?: 'info' | 'done' | 'warning' | 'error';
        /**
          * Seta a versão Figure
         */
        "useFigure"?: boolean;
    }
    interface ApolloFeedbackPageActions {
    }
    interface ApolloFeedbackPageContent {
    }
    interface ApolloFlex {
        /**
          * Abreviação de prop no estilo `alignItems`
         */
        "alignItems"?: Align;
        /**
          * Abreviação de prop no estilo `flexDirection`
         */
        "direction"?: Direction;
        /**
          * Abreviação de prop no estilo `flexGrow`
         */
        "grow"?: ResponsiveProp<number>;
        /**
          * Abreviação de prop de estilo `justifyContent`
         */
        "justify"?: Justify;
        /**
          * Pode mudar a ordem usando `reverse`
         */
        "reverse"?: Direction;
        /**
          * Cria um espaçamento igual entre os elementos. Mantendo o primeiro grudado no início e o último no final.
         */
        "spacer"?: boolean;
        /**
          * Abreviação de prop no estilo `flexWrap` adiciona o valor `wrap`
         */
        "wrap"?: boolean;
    }
    interface ApolloGhostElement {
        /**
          * Espaçamento aplicado ao elemento
         */
        "display"?: string;
        /**
          * Altura do elemento
         */
        "height"?: string;
        /**
          * Margem aplicada ao elemento
         */
        "margin"?: string;
        /**
          * Espaçamento aplicado ao elemento
         */
        "padding"?: string;
        /**
          * Largura do elemento
         */
        "width"?: string;
    }
    interface ApolloGrid {
        /**
          * Abreviação de prop no estilo `gap`
         */
        "gap"?: number;
        /**
          * Abreviação de prop no estilo `height`
         */
        "height"?: string;
        /**
          * Abreviação de prop no estilo `templateColumns`
         */
        "templateColumns"?: string;
        /**
          * Abreviação de prop no estilo `templateRows`
         */
        "templateRows"?: string;
    }
    interface ApolloGridItem {
        /**
          * Cor de fundo
         */
        "backgroundColor"?: ResponsiveProp<string>;
        /**
          * Cor de fundo
         */
        "bg"?: ResponsiveProp<string>;
        /**
          * colEnd
         */
        "colEnd"?: number;
        /**
          * colSpan
         */
        "colSpan"?: number;
        /**
          * colStart
         */
        "colStart"?: number;
        /**
          * rowEnd
         */
        "rowEnd"?: number;
        /**
          * rowSpan
         */
        "rowSpan"?: number;
        /**
          * rowStart
         */
        "rowStart"?: number;
    }
    interface ApolloHeader {
        /**
          * backButton
         */
        "backButton"?: boolean;
        /**
          * collapsed
         */
        "collapsed"?: boolean;
        /**
          * media
         */
        "media"?: boolean;
    }
    interface ApolloHeading {
        /**
          * Cor de conteúdo
         */
        "color"?: ResponsiveProp<string>;
        /**
          * Passe `isTruncated` para renderizar reticência quando o texto exceder a largura.
         */
        "isTruncated"?: boolean;
        /**
          * Da mesma forma, que o `isTruncated` passe a propriedade `noOfLines` e defina-o com o número de linhas desejado.
         */
        "noOfLines"?: number;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `size`.
         */
        "size"?: Size;
    }
    interface ApolloIcon {
        /**
          * Cor do ícone. Tokens DS.
         */
        "color"?: string;
        /**
          * Cor do ícone. Hexadecimal.
         */
        "fill"?: string;
        /**
          * Texto de ajuda. Para acessibilidade.
         */
        "label"?: string;
        /**
          * O atributo que define a função.
         */
        "role"?: string;
        /**
          * O tamanho do ícone
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * O nome do ícone SVG.
         */
        "svgIcon"?: string;
        /**
          * O tipo do ícone SVG
         */
        "typeIcon"?: string;
    }
    interface ApolloIconButton {
        /**
          * checked
         */
        "checked"?: boolean;
        /**
          * color
         */
        "color"?: string;
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * icon
         */
        "icon"?: string;
        /**
          * iconOff
         */
        "iconOff"?: string;
        /**
          * iconOn
         */
        "iconOn"?: string;
        /**
          * iconPack
         */
        "iconPack"?: string;
        /**
          * Habilita o estado inválido do input
         */
        "invalid"?: boolean;
        /**
          * labelOff
         */
        "labelOff"?: string;
        /**
          * labelOn
         */
        "labelOn"?: string;
        /**
          * Evento disparado quando o componente perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<null>) => void;
        /**
          * Evento disparado quando o valor do componente muda
         */
        "onApolloChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * pid
         */
        "pid"?: string;
        /**
          * size
          * @prop reflect: O CSS usa a referência do atributo no elemento para aplicar algumas regras
         */
        "size"?: 'sm' | 'md';
    }
    interface ApolloLink {
        /**
          * Cor de conteúdo
         */
        "color"?: ResponsiveProp<string>;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `fontSize`.
         */
        "fontSize"?: FontSize;
        /**
          * Cor do link quando em estado hover
         */
        "hoverColor"?: ResponsiveProp<string>;
        /**
          * Contém um URL ou fragmento de URL para o qual o hiperlink aponta. * Se esta propriedade for definida, uma tag âncora será renderizada.
         */
        "href"?: string;
        /**
          * Se `true`, o link será aberto em uma nova aba
         */
        "isExternal"?: boolean;
    }
    interface ApolloList {
        /**
          * Adiciona um estilo para a lista parecer mais compacta
         */
        "dense"?: boolean;
    }
    interface ApolloListDivider {
    }
    interface ApolloListGroup {
        /**
          * Adiciona um título para o grupo
         */
        "header"?: string;
    }
    interface ApolloListItem {
        /**
          * Desabilita o item
         */
        "disabled"?: boolean;
        /**
          * Evento chamado ao clicar no item
         */
        "onPress"?: (event: CustomEvent<any>) => void;
        /**
          * Adiciona uma role para o item
         */
        "role"?: 'menuitem' | 'option';
        /**
          * Adiciona um texto secundário para o item
         */
        "secondaryText"?: string | null;
        /**
          * Se é componente de select
         */
        "select"?: boolean;
        /**
          * Adiciona estilo de seleção ao item
         */
        "selected"?: boolean;
        /**
          * Adiciona um valor ao item
         */
        "value"?: any;
    }
    interface ApolloLogo {
        /**
          * O nome curto do logo.
         */
        "nickname"?: string;
    }
    interface ApolloMenu {
        /**
          * Estado de aberto/fechado do menu
         */
        "defaultOpen"?: boolean;
        /**
          * Evento disparado quando um item da lista é selecionado
         */
        "onItemSelect"?: (event: CustomEvent<{ value: any; index: number; item: HTMLElement }>) => void;
        /**
          * Se é menu do select
         */
        "select"?: boolean;
    }
    interface ApolloMenuItem {
        /**
          * Contém um URL ou fragmento de URL para o qual o hiperlink aponta. * Se esta propriedade for definida, uma tag âncora será renderizada.
         */
        "href"?: string;
        /**
          * Se `true`, o link será aberto em uma nova aba
         */
        "isExternal"?: boolean;
    }
    interface ApolloModal {
        /**
          * Seta a versão Large do ícone para devices mobile
         */
        "figure"?: string;
        /**
          * Ícone da dialog
         */
        "icon"?: string;
        /**
          * Subtitulo do dialog
         */
        "modalSubtitle"?: string;
        /**
          * Título do dialog
         */
        "modalTitle"?: string;
        /**
          * Evento disparado quando o botão de fechar o modal for clicado
         */
        "onCloseModal"?: (event: CustomEvent<MouseEvent>) => void;
    }
    interface ApolloNavItem {
        /**
          * Mark this item as disabled.
         */
        "disabled"?: boolean;
        /**
          * click of list-item handler
         */
        "onItemSelected"?: (event: CustomEvent<void>) => void;
        /**
          * make the item selectable
         */
        "selectable"?: boolean;
        /**
          * Mark this item as selected.
         */
        "selected"?: boolean;
    }
    interface ApolloPage {
    }
    interface ApolloProgressBar {
        /**
          * Valor da fração, que equivale ao progresso atual
         */
        "fraction"?: number;
        /**
          * Valor total, que equivale a 100% do progresso
         */
        "total"?: number;
    }
    interface ApolloRadio {
        /**
          * Indica se o componente está selecionado
         */
        "checked"?: boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled"?: boolean;
        /**
          * Adiciona margens para display em inline
         */
        "inline"?: boolean;
        /**
          * Indica se o componente está inválido
         */
        "invalid"?: boolean;
        /**
          * Texto vinculado ao componente
         */
        "label"?: string;
        /**
          * Nome do componente para agrupar radio buttons em forms
         */
        "name"?: string;
        /**
          * nowrap
         */
        "nowrap"?: boolean;
        /**
          * Evento disparado quando o componente perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<null>) => void;
        /**
          * Evento disparado quando o valor do componente muda
         */
        "onApolloChange"?: (event: CustomEvent<string>) => void;
        /**
          * Posição do texto com base no componente
         */
        "position"?: 'before' | 'after';
        /**
          * Valor do componente
         */
        "value"?: string;
    }
    interface ApolloRipple {
        /**
          * Abreviação de propriedade de estilo `height`
         */
        "height"?: string;
        /**
          * Evento de keyUp
         */
        "onApolloClick"?: (event: CustomEvent<any>) => void;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "round"?: boolean;
        /**
          * Abreviação de propriedade de estilo `width`
         */
        "width"?: string;
    }
    interface ApolloSearchBar {
        /**
          * Evento disparado quando o campo perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Evento disparado quando o usuário termina de digitar e o tempo de atraso de envio do evento for concluído
         */
        "onApolloChange"?: (event: CustomEvent<any>) => void;
        /**
          * Evento disparado quando o campo recebe foco
         */
        "onApolloFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Seta o valor do input
         */
        "value"?: string;
    }
    interface ApolloSelect {
        /**
          * Habilita o estado desativado do Select
         */
        "disabled"?: boolean;
        /**
          * Quando verdadeiro fixa a exibição do texto de ajuda mesmo que o campo não esteja em foco
         */
        "helperPersist"?: boolean;
        /**
          * Texto de ajuda
         */
        "helperText"?: string;
        /**
          * Id único do Select
         */
        "idElement"?: string;
        /**
          * Habilita o estado inválido do Select
         */
        "invalid"?: boolean;
        /**
          * Label do Select | Usado como placeholder ou float-label dependendo da configuração do componente
         */
        "label"?: string;
        /**
          * Ícone localizado na parte esquerda
         */
        "leadingIcon"?: boolean;
        /**
          * Referência do Select nativo
         */
        "name"?: string;
        /**
          * Deixa o label apenas como placeholder
         */
        "noFloatingLabel"?: boolean;
        /**
          * Evento disparado quando o valor do componente muda
         */
        "onApolloChange"?: (event: CustomEvent<string>) => void;
        /**
          * Marca o campo como obrigatório e adiciona um * no final do label/placeholder
         */
        "required"?: boolean;
        /**
          * Ajusta o tamanho em altura do componente: sm = 36px, md = 48px
         */
        "size"?: 'sm' | 'md';
        /**
          * Habilita o estado válido do Select
         */
        "success"?: boolean;
        /**
          * Para fins de performance o evento inputChange só é disparado em uma quantidade delimitada de tempo
         */
        "threshold"?: number;
        /**
          * Seta o valor do Select
         */
        "value"?: any;
        /**
          * Option do select padrão com valor vazio
         */
        "valueEmpty"?: boolean;
        /**
          * Estilo do Select
         */
        "variant"?: 'filled' | 'outlined';
    }
    interface ApolloSelectIcon {
        /**
          * aria-label
         */
        "ariaLabel"?: string;
        /**
          * disabled
         */
        "disabled"?: boolean;
    }
    interface ApolloSelectItem {
        /**
          * Desabilita o item
         */
        "disabled"?: boolean;
        /**
          * Evento chamado ao clicar no item
         */
        "onPress"?: (event: CustomEvent<any>) => void;
        /**
          * Adiciona estilo de seleção ao item
         */
        "selected"?: boolean;
        /**
          * Adiciona um valor ao item
         */
        "value"?: any;
    }
    interface ApolloSidebar {
        /**
          * Quando definido como verdadeiro, o `collapse` irá alternar para fechado
         */
        "collapsed"?: boolean;
        /**
          * Evento disparado quando o componente é alternado abert/fechado
         */
        "onApolloCollapsed"?: (event: CustomEvent<any>) => void;
    }
    interface ApolloSimpleGrid {
        /**
          * O número de colunas
         */
        "columns"?: ResponsiveProp<number>;
        /**
          * A largura na qual os elementos filho serão divididos em colunas. Passe um número para valores de pixel ou uma string para qualquer outro comprimento CSS válido.
         */
        "minChildWidth"?: ResponsiveProp<string>;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing"?: Spacing;
    }
    interface ApolloSkeleton {
        /**
          * Tipo de animação
         */
        "animation"?: 'progress' | 'progress-dark' | 'pulse' | 'false';
        /**
          * Quantidade de skeletons a serem carregados
         */
        "count"?: number;
        /**
          * Custom css styles (background/margins/width/height etc.)
         */
        "customStyles"?: { [key: string]: string } | string;
        /**
          * Altura do skeleton ex. 100px, 100%, auto etc.
         */
        "height"?: string;
        /**
          * Habilita os warnings para animações não suportadas
         */
        "showWarnings"?: boolean;
        /**
          * Tamanhos pré definidos, sobrescreve as propriedades width e height.
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xlg' | 'xxlg' | 'xxxlg';
        /**
          * Seleciona valores padrões de um template definido no CSS
         */
        "templateWidth"?: boolean;
        /**
          * Estilo do skeleton
         */
        "variant"?: 'circle' | 'rect' | 'text' | 'pill';
        /**
          * Largura do skeleton ex. 100px, 100%, auto etc.
         */
        "width"?: string;
    }
    interface ApolloSnackbar {
        /**
          * Label do botão
         */
        "actionButtonLabel"?: string;
        /**
          * Ativa ênfase no snackbar
         */
        "emphasis"?: boolean;
        /**
          * Label da snackbar
         */
        "label"?: string;
        /**
          * Evento disparado quando o botão de ação for clicado
         */
        "onActionButtonClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Posição do snackbar
         */
        "position"?: 'baseline' | 'leading';
        /**
          * Renderiza um botão com a função de fechar o snackbar quando clicado
         */
        "showDismissButton"?: boolean;
        /**
          * Renderiza o snackbar no modo stacked
         */
        "stacked"?: boolean;
        /**
          * Tipo do snackbar
         */
        "type"?: 'info' | 'done' | 'warning' | 'error';
    }
    interface ApolloStack {
        /**
          * Abreviação de propriedade de estilo `align-items`
         */
        "alignItems"?: Align;
        /**
          * Abreviação de propriedade de estilo `flex-direction`
         */
        "direction"?: Direction;
        /**
          * Abreviação de propriedade de estilo `justify-content`
         */
        "justify"?: Justify;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing"?: Spacing;
    }
    interface ApolloSwitchToggle {
        /**
          * Indica se o componente está selecionado
         */
        "checked"?: boolean;
        /**
          * Habilita/Desabilita o estado desativado do componente
         */
        "disabled"?: boolean;
        /**
          * Texto vinculado ao componente
         */
        "label"?: string;
        /**
          * nowrap
         */
        "nowrap"?: boolean;
        /**
          * Evento disparado quando o componente perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<null>) => void;
        /**
          * Evento disparado quando o valor do componente muda
         */
        "onApolloChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Posição do texto com base no componente
         */
        "position"?: 'before' | 'after';
    }
    interface ApolloTemplateSkeleton {
        /**
          * Alinhamento dos skeletons
         */
        "align"?: 'center' | 'left' | 'right';
        /**
          * Define se o template irá exibir o skeleton de avatar
         */
        "avatar"?: boolean;
        /**
          * Tamanhos pré definidos para o avatar.
         */
        "avatarSize"?: 'sm' | 'md' | 'lg' | 'xlg' | 'xxlg' | 'xxxlg';
        /**
          * Quantidade de templates skeletons a serem carregados
         */
        "count"?: number;
        /**
          * Habilita os warnings
         */
        "showWarnings"?: boolean;
        /**
          * Quantidade de skeletons do tipo texto a serem carregados
         */
        "textCount"?: number;
        /**
          * Altura do skeleton ex. 100px, 100%, auto etc.
         */
        "textHeight"?: string;
        /**
          * Estilo do template skeleton
         */
        "textVariant"?: 'rect' | 'text' | 'pill';
    }
    interface ApolloText {
        /**
          * Cor de conteúdo
         */
        "color"?: ResponsiveProp<string>;
        /**
          * Para aumentar o tamanho da fonte do texto, você pode passar a propriedade `fontSize`.
         */
        "fontSize"?: FontSize;
        /**
          * Abreviação de propriedade de estilo `fontWeight`
         */
        "fontWeight"?: FontWeight;
        /**
          * Passe `isTruncated` para renderizar reticência quando o texto exceder a largura.
         */
        "isTruncated"?: boolean;
        /**
          * Da mesma forma, que o `isTruncated` passe a propriedade `noOfLines` e defina-o com o número de linhas desejado.
         */
        "noOfLines"?: number;
        /**
          * Abreviação de prop no estilo `textAlign`
         */
        "textAlign"?: ResponsiveProp<TextAlign>;
    }
    interface ApolloTextfield {
        /**
          * Habilita a contagem de caracteres no canto inferior direito do input
         */
        "characterCounter"?: boolean;
        /**
          * Quando usado junto com o textarea ele limita a quantidade de colunas que o campo de texto deverá ter
         */
        "cols"?: number;
        /**
          * Habilita o estado desativado do input
         */
        "disabled"?: boolean;
        /**
          * Quando verdadeiro fixa a exibição do texto de ajuda mesmo que o campo não esteja em foco
         */
        "helperPersist"?: boolean;
        /**
          * Texto de ajuda
         */
        "helperText"?: string;
        /**
          * Id único do input
         */
        "idElement"?: string;
        /**
          * Fornece uma dica para navegadores de dispositivos com teclados na tela para ajudá-los a decidir qual teclado exibir
         */
        "inputmode"?: 'none' | 'text' | 'numeric' | 'tel' | 'decimal' | 'email' | 'url' | 'search';
        /**
          * Habilita o estado inválido do input
         */
        "invalid"?: boolean;
        /**
          * Label do input | Usado como placeholder ou float-label dependendo da configuração do componente
         */
        "label"?: string;
        /**
          * Ícone localizado na parte esquerda
         */
        "leadingIcon"?: boolean;
        /**
          * Define as máscaras nas entradas
         */
        "mask"?: string;
        /**
          * Define os tipos de máscaras já estabelecidas Formatos: cep - 99999-999 date - 99/99/9999 cpf - 999.999.999-99 cnpj - 99.999.999/9999-99 tel - (99) 9999-9999 cel - (99) 99999-9999 currency - 999.999.999,99
         */
        "maskVariant"?: string | string[];
        /**
          * Quando usado junto com o type: number ele limita o valor máximo do campo nas interações do usuário com os botões de ação do tipo numérico, mas não faz validação se o usuário digitar uma informação inválida
         */
        "max"?: string;
        /**
          * Quando usado junto com o characterCounter ele limita a quantidade máxima de caracteres
         */
        "maxLength"?: string;
        /**
          * Quando usado junto com o type: number ele limita o valor mínimo do campo nas interações do usuário, mas não faz validação se o usuário digitar uma informação inválida
         */
        "min"?: string;
        /**
          * Limita a quantidade minima de caracteres
         */
        "minLength"?: string;
        /**
          * Referência do input nativo
         */
        "name"?: string;
        /**
          * Deixa o label apenas como placeholder
         */
        "noFloatingLabel"?: boolean;
        /**
          * Evento disparado quando o campo perde o foco
         */
        "onApolloBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Evento disparado quando o usuário termina de digitar e o tempo de atraso de envio do evento for concluído
         */
        "onApolloChange"?: (event: CustomEvent<string>) => void;
        /**
          * Evento disparado quando o campo recebe foco
         */
        "onApolloFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Evento disparado quando o ponteiro está sob o componente
         */
        "onApolloPointerEnter"?: (event: CustomEvent<PointerEvent>) => void;
        /**
          * Evento disparado quando o ponteiro sai do componente
         */
        "onApolloPointerLeave"?: (event: CustomEvent<PointerEvent>) => void;
        /**
          * Habilita o estado read-only do input
         */
        "readonly"?: boolean;
        /**
          * Marca o campo como obrigatório e adiciona um * no final do label/placeholder
         */
        "required"?: boolean;
        /**
          * Quando usado junto com o textarea ele limita a quantidade de linhas que o campo de texto deverá ter
         */
        "rows"?: number;
        /**
          * Ajusta o tamanho em altura do componente: sm = 36px, md = 48px
         */
        "size"?: 'sm' | 'md';
        /**
          * Quando usado junto com o type: number ele altera o valor de incremento e decremento nas interações do usuário com os botões de ação do tipo numérico
         */
        "step"?: string;
        /**
          * Habilita o estado válido do input
         */
        "success"?: boolean;
        /**
          * Transforma o input em um textarea
         */
        "textarea"?: boolean;
        /**
          * Para fins de performance o evento inputChange só é disparado em uma quantidade delimitada de tempo
         */
        "threshold"?: number;
        /**
          * Ícone localizado na parte direita para limpar o input
         */
        "trailingClearIcon"?: boolean;
        /**
          * Ícone localizado na parte direita
         */
        "trailingIcon"?: boolean;
        /**
          * Tipo de dado do input | Estende os tipos em formato de texto do HTMLInput
         */
        "type"?: 'text' | 'email' | 'password' | 'tel' | 'search' | 'number' | 'url' | 'date';
        /**
          * Value do input sem os caracteres especiais das máscaras Caracteres a serem removidos: - / ( ) . : space + ,
          * @ [ ] " '
         */
        "unmaskedValue"?: string;
        /**
          * Seta o valor do input
         */
        "value"?: string;
        /**
          * Texto fixo localizado antes do campo de input
         */
        "valuePrefix"?: string;
        /**
          * Texto fixo localizado após o campo de input
         */
        "valueSuffix"?: string;
        /**
          * Estilo do input
         */
        "variant"?: 'filled' | 'outlined';
    }
    interface ApolloTextfieldIcon {
        /**
          * aria-label
         */
        "ariaLabel"?: string;
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * Evento de keyUp
         */
        "onApolloKeyUp"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * type
         */
        "type"?: 'leading' | 'trailing';
    }
    interface ApolloToggleButton {
        /**
          * Estado do botão
         */
        "checked"?: boolean;
        /**
          * Evento disparado quando o toggle é clickado
         */
        "onToggleChange"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Tamanho do botão
         */
        "size"?: 'sm' | 'md';
        /**
          * Ícone do botão com estado de toggle Off
         */
        "toggleOffIcon"?: string;
        /**
          * Label do botão com estado de toggle off
         */
        "toggleOffLabel"?: string;
        /**
          * Ícone do botão com estado de toggle Off
         */
        "toggleOffTypeIcon"?: string;
        /**
          * Ícone do botão com estado de toggle on
         */
        "toggleOnIcon"?: string;
        /**
          * Label do botão com estado de toggle on
         */
        "toggleOnLabel"?: string;
        /**
          * Ícone do botão com estado de toggle on
         */
        "toggleOnTypeIcon"?: string;
    }
    interface ApolloToolbar {
        /**
          * Adiciona um campo de pesquisa principal
         */
        "isSearch"?: boolean;
        /**
          * Evento disparado quando o campo perde o foco
         */
        "onApolloSearchBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Evento disparado quando o usuário termina de digitar e o tempo de atraso de envio do evento for concluído
         */
        "onApolloSearchChange"?: (event: CustomEvent<InputEvent>) => void;
        /**
          * Evento disparado quando o campo recebe foco
         */
        "onApolloSearchFocus"?: (event: CustomEvent<FocusEvent>) => void;
    }
    interface ApolloToolbarActions {
    }
    interface ApolloTooltip {
        /**
          * Texto do tooltip
         */
        "description"?: string;
        /**
          * É um link externo?
         */
        "isExternal"?: boolean;
        /**
          * label do link
         */
        "linkLabel"?: string;
        /**
          * link
         */
        "linkUrl"?: string;
        /**
          * Margin ao ocorrer overflow
         */
        "margin"?: number;
        /**
          * Espaçamento do tooltip e o elemento chave
         */
        "offset"?: number;
        /**
          * Posição do tooltip
         */
        "placement"?: | 'top'
        | 'top-start'
        | 'top-end'
        | 'bottom'
        | 'bottom-start'
        | 'bottom-end'
        | 'right'
        | 'right-start'
        | 'right-end'
        | 'left'
        | 'left-start'
        | 'left-end';
        /**
          * Tamanho do Potooltip
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * Título do tooltip
         */
        "titleText"?: string;
    }
    interface ApolloWrap {
        /**
          * Abreviação de propriedade de estilo `align-items`
         */
        "alignItems"?: Align;
        /**
          * Abreviação de propriedade de estilo `flex-direction`
         */
        "direction"?: Direction;
        /**
          * Abreviação de propriedade de estilo `justify-content`
         */
        "justify"?: Justify;
        /**
          * Passe a propriedade `spacing` para aplicar espaçamento consistente entre cada filho
         */
        "spacing"?: Spacing;
    }
    interface TextfieldCharacterCounter {
    }
    interface TextfieldHelperText {
        /**
          * invalid
         */
        "invalid"?: boolean;
        /**
          * persist
         */
        "persist"?: boolean;
        /**
          * text
         */
        "text"?: string;
    }
    interface IntrinsicElements {
        "apollo-avatar": ApolloAvatar;
        "apollo-badge": ApolloBadge;
        "apollo-box": ApolloBox;
        "apollo-button": ApolloButton;
        "apollo-card": ApolloCard;
        "apollo-card-action-buttons": ApolloCardActionButtons;
        "apollo-card-action-icons": ApolloCardActionIcons;
        "apollo-card-actions": ApolloCardActions;
        "apollo-card-content": ApolloCardContent;
        "apollo-card-media": ApolloCardMedia;
        "apollo-card-media-content": ApolloCardMediaContent;
        "apollo-center": ApolloCenter;
        "apollo-checkbox": ApolloCheckbox;
        "apollo-circular-progress": ApolloCircularProgress;
        "apollo-collapse": ApolloCollapse;
        "apollo-container": ApolloContainer;
        "apollo-dialog": ApolloDialog;
        "apollo-feedback-button": ApolloFeedbackButton;
        "apollo-feedback-card": ApolloFeedbackCard;
        "apollo-feedback-dialog": ApolloFeedbackDialog;
        "apollo-feedback-page": ApolloFeedbackPage;
        "apollo-feedback-page-actions": ApolloFeedbackPageActions;
        "apollo-feedback-page-content": ApolloFeedbackPageContent;
        "apollo-flex": ApolloFlex;
        "apollo-ghost-element": ApolloGhostElement;
        "apollo-grid": ApolloGrid;
        "apollo-grid-item": ApolloGridItem;
        "apollo-header": ApolloHeader;
        "apollo-heading": ApolloHeading;
        "apollo-icon": ApolloIcon;
        "apollo-icon-button": ApolloIconButton;
        "apollo-link": ApolloLink;
        "apollo-list": ApolloList;
        "apollo-list-divider": ApolloListDivider;
        "apollo-list-group": ApolloListGroup;
        "apollo-list-item": ApolloListItem;
        "apollo-logo": ApolloLogo;
        "apollo-menu": ApolloMenu;
        "apollo-menu-item": ApolloMenuItem;
        "apollo-modal": ApolloModal;
        "apollo-nav-item": ApolloNavItem;
        "apollo-page": ApolloPage;
        "apollo-progress-bar": ApolloProgressBar;
        "apollo-radio": ApolloRadio;
        "apollo-ripple": ApolloRipple;
        "apollo-search-bar": ApolloSearchBar;
        "apollo-select": ApolloSelect;
        "apollo-select-icon": ApolloSelectIcon;
        "apollo-select-item": ApolloSelectItem;
        "apollo-sidebar": ApolloSidebar;
        "apollo-simple-grid": ApolloSimpleGrid;
        "apollo-skeleton": ApolloSkeleton;
        "apollo-snackbar": ApolloSnackbar;
        "apollo-stack": ApolloStack;
        "apollo-switch-toggle": ApolloSwitchToggle;
        "apollo-template-skeleton": ApolloTemplateSkeleton;
        "apollo-text": ApolloText;
        "apollo-textfield": ApolloTextfield;
        "apollo-textfield-icon": ApolloTextfieldIcon;
        "apollo-toggle-button": ApolloToggleButton;
        "apollo-toolbar": ApolloToolbar;
        "apollo-toolbar-actions": ApolloToolbarActions;
        "apollo-tooltip": ApolloTooltip;
        "apollo-wrap": ApolloWrap;
        "textfield-character-counter": TextfieldCharacterCounter;
        "textfield-helper-text": TextfieldHelperText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "apollo-avatar": LocalJSX.ApolloAvatar & JSXBase.HTMLAttributes<HTMLApolloAvatarElement>;
            "apollo-badge": LocalJSX.ApolloBadge & JSXBase.HTMLAttributes<HTMLApolloBadgeElement>;
            "apollo-box": LocalJSX.ApolloBox & JSXBase.HTMLAttributes<HTMLApolloBoxElement>;
            "apollo-button": LocalJSX.ApolloButton & JSXBase.HTMLAttributes<HTMLApolloButtonElement>;
            "apollo-card": LocalJSX.ApolloCard & JSXBase.HTMLAttributes<HTMLApolloCardElement>;
            "apollo-card-action-buttons": LocalJSX.ApolloCardActionButtons & JSXBase.HTMLAttributes<HTMLApolloCardActionButtonsElement>;
            "apollo-card-action-icons": LocalJSX.ApolloCardActionIcons & JSXBase.HTMLAttributes<HTMLApolloCardActionIconsElement>;
            "apollo-card-actions": LocalJSX.ApolloCardActions & JSXBase.HTMLAttributes<HTMLApolloCardActionsElement>;
            "apollo-card-content": LocalJSX.ApolloCardContent & JSXBase.HTMLAttributes<HTMLApolloCardContentElement>;
            "apollo-card-media": LocalJSX.ApolloCardMedia & JSXBase.HTMLAttributes<HTMLApolloCardMediaElement>;
            "apollo-card-media-content": LocalJSX.ApolloCardMediaContent & JSXBase.HTMLAttributes<HTMLApolloCardMediaContentElement>;
            "apollo-center": LocalJSX.ApolloCenter & JSXBase.HTMLAttributes<HTMLApolloCenterElement>;
            "apollo-checkbox": LocalJSX.ApolloCheckbox & JSXBase.HTMLAttributes<HTMLApolloCheckboxElement>;
            "apollo-circular-progress": LocalJSX.ApolloCircularProgress & JSXBase.HTMLAttributes<HTMLApolloCircularProgressElement>;
            "apollo-collapse": LocalJSX.ApolloCollapse & JSXBase.HTMLAttributes<HTMLApolloCollapseElement>;
            "apollo-container": LocalJSX.ApolloContainer & JSXBase.HTMLAttributes<HTMLApolloContainerElement>;
            "apollo-dialog": LocalJSX.ApolloDialog & JSXBase.HTMLAttributes<HTMLApolloDialogElement>;
            "apollo-feedback-button": LocalJSX.ApolloFeedbackButton & JSXBase.HTMLAttributes<HTMLApolloFeedbackButtonElement>;
            "apollo-feedback-card": LocalJSX.ApolloFeedbackCard & JSXBase.HTMLAttributes<HTMLApolloFeedbackCardElement>;
            "apollo-feedback-dialog": LocalJSX.ApolloFeedbackDialog & JSXBase.HTMLAttributes<HTMLApolloFeedbackDialogElement>;
            "apollo-feedback-page": LocalJSX.ApolloFeedbackPage & JSXBase.HTMLAttributes<HTMLApolloFeedbackPageElement>;
            "apollo-feedback-page-actions": LocalJSX.ApolloFeedbackPageActions & JSXBase.HTMLAttributes<HTMLApolloFeedbackPageActionsElement>;
            "apollo-feedback-page-content": LocalJSX.ApolloFeedbackPageContent & JSXBase.HTMLAttributes<HTMLApolloFeedbackPageContentElement>;
            "apollo-flex": LocalJSX.ApolloFlex & JSXBase.HTMLAttributes<HTMLApolloFlexElement>;
            "apollo-ghost-element": LocalJSX.ApolloGhostElement & JSXBase.HTMLAttributes<HTMLApolloGhostElementElement>;
            "apollo-grid": LocalJSX.ApolloGrid & JSXBase.HTMLAttributes<HTMLApolloGridElement>;
            "apollo-grid-item": LocalJSX.ApolloGridItem & JSXBase.HTMLAttributes<HTMLApolloGridItemElement>;
            "apollo-header": LocalJSX.ApolloHeader & JSXBase.HTMLAttributes<HTMLApolloHeaderElement>;
            "apollo-heading": LocalJSX.ApolloHeading & JSXBase.HTMLAttributes<HTMLApolloHeadingElement>;
            "apollo-icon": LocalJSX.ApolloIcon & JSXBase.HTMLAttributes<HTMLApolloIconElement>;
            "apollo-icon-button": LocalJSX.ApolloIconButton & JSXBase.HTMLAttributes<HTMLApolloIconButtonElement>;
            "apollo-link": LocalJSX.ApolloLink & JSXBase.HTMLAttributes<HTMLApolloLinkElement>;
            "apollo-list": LocalJSX.ApolloList & JSXBase.HTMLAttributes<HTMLApolloListElement>;
            "apollo-list-divider": LocalJSX.ApolloListDivider & JSXBase.HTMLAttributes<HTMLApolloListDividerElement>;
            "apollo-list-group": LocalJSX.ApolloListGroup & JSXBase.HTMLAttributes<HTMLApolloListGroupElement>;
            "apollo-list-item": LocalJSX.ApolloListItem & JSXBase.HTMLAttributes<HTMLApolloListItemElement>;
            "apollo-logo": LocalJSX.ApolloLogo & JSXBase.HTMLAttributes<HTMLApolloLogoElement>;
            "apollo-menu": LocalJSX.ApolloMenu & JSXBase.HTMLAttributes<HTMLApolloMenuElement>;
            "apollo-menu-item": LocalJSX.ApolloMenuItem & JSXBase.HTMLAttributes<HTMLApolloMenuItemElement>;
            "apollo-modal": LocalJSX.ApolloModal & JSXBase.HTMLAttributes<HTMLApolloModalElement>;
            "apollo-nav-item": LocalJSX.ApolloNavItem & JSXBase.HTMLAttributes<HTMLApolloNavItemElement>;
            "apollo-page": LocalJSX.ApolloPage & JSXBase.HTMLAttributes<HTMLApolloPageElement>;
            "apollo-progress-bar": LocalJSX.ApolloProgressBar & JSXBase.HTMLAttributes<HTMLApolloProgressBarElement>;
            "apollo-radio": LocalJSX.ApolloRadio & JSXBase.HTMLAttributes<HTMLApolloRadioElement>;
            "apollo-ripple": LocalJSX.ApolloRipple & JSXBase.HTMLAttributes<HTMLApolloRippleElement>;
            "apollo-search-bar": LocalJSX.ApolloSearchBar & JSXBase.HTMLAttributes<HTMLApolloSearchBarElement>;
            "apollo-select": LocalJSX.ApolloSelect & JSXBase.HTMLAttributes<HTMLApolloSelectElement>;
            "apollo-select-icon": LocalJSX.ApolloSelectIcon & JSXBase.HTMLAttributes<HTMLApolloSelectIconElement>;
            "apollo-select-item": LocalJSX.ApolloSelectItem & JSXBase.HTMLAttributes<HTMLApolloSelectItemElement>;
            "apollo-sidebar": LocalJSX.ApolloSidebar & JSXBase.HTMLAttributes<HTMLApolloSidebarElement>;
            "apollo-simple-grid": LocalJSX.ApolloSimpleGrid & JSXBase.HTMLAttributes<HTMLApolloSimpleGridElement>;
            "apollo-skeleton": LocalJSX.ApolloSkeleton & JSXBase.HTMLAttributes<HTMLApolloSkeletonElement>;
            "apollo-snackbar": LocalJSX.ApolloSnackbar & JSXBase.HTMLAttributes<HTMLApolloSnackbarElement>;
            "apollo-stack": LocalJSX.ApolloStack & JSXBase.HTMLAttributes<HTMLApolloStackElement>;
            "apollo-switch-toggle": LocalJSX.ApolloSwitchToggle & JSXBase.HTMLAttributes<HTMLApolloSwitchToggleElement>;
            "apollo-template-skeleton": LocalJSX.ApolloTemplateSkeleton & JSXBase.HTMLAttributes<HTMLApolloTemplateSkeletonElement>;
            "apollo-text": LocalJSX.ApolloText & JSXBase.HTMLAttributes<HTMLApolloTextElement>;
            "apollo-textfield": LocalJSX.ApolloTextfield & JSXBase.HTMLAttributes<HTMLApolloTextfieldElement>;
            "apollo-textfield-icon": LocalJSX.ApolloTextfieldIcon & JSXBase.HTMLAttributes<HTMLApolloTextfieldIconElement>;
            "apollo-toggle-button": LocalJSX.ApolloToggleButton & JSXBase.HTMLAttributes<HTMLApolloToggleButtonElement>;
            "apollo-toolbar": LocalJSX.ApolloToolbar & JSXBase.HTMLAttributes<HTMLApolloToolbarElement>;
            "apollo-toolbar-actions": LocalJSX.ApolloToolbarActions & JSXBase.HTMLAttributes<HTMLApolloToolbarActionsElement>;
            "apollo-tooltip": LocalJSX.ApolloTooltip & JSXBase.HTMLAttributes<HTMLApolloTooltipElement>;
            "apollo-wrap": LocalJSX.ApolloWrap & JSXBase.HTMLAttributes<HTMLApolloWrapElement>;
            "textfield-character-counter": LocalJSX.TextfieldCharacterCounter & JSXBase.HTMLAttributes<HTMLTextfieldCharacterCounterElement>;
            "textfield-helper-text": LocalJSX.TextfieldHelperText & JSXBase.HTMLAttributes<HTMLTextfieldHelperTextElement>;
        }
    }
}
